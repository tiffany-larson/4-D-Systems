file C:\Users\tlars\Documents\4d-systems-35dt\TouchScreen 5-4-16\TouchScreen 5-4-16.4dg

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005193  000003  #inherit "4DGL_16bitColours.fnc"
005194  000003  #inherit "4DGL_16bitColours.fnc"
005195  000004  */
005196  000005        
005197  000006        
005198  000007        
005199  000008  #CONST
005200  000149  #END
005201  000150        
005202  000004        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005203  000005  #inherit "VisualConst.inc"
005204  000005  #inherit "VisualConst.inc"
005205  000001  // Line Patterns
005206  000002  #constant  LPCOARSE    0xF0F0
005207  000002  #constant  LPCOARSE    0xF0F0
005208  000003  #constant  LPMEDIUM    0x3333
005209  000003  #constant  LPMEDIUM    0x3333
005210  000004  #constant  LPFINE      0xAAAA
005211  000004  #constant  LPFINE      0xAAAA
005212  000005  #constant  LPDASHDOT   0x03CF
005213  000005  #constant  LPDASHDOT   0x03CF
005214  000006  #constant  LPDASHDOTDOT 0x0333
005215  000006  #constant  LPDASHDOTDOT 0x0333
005216  000007  #constant  LPSOLID     0x0000
005217  000007  #constant  LPSOLID     0x0000
005218  000006        
file C:\Users\tlars\Documents\4d-systems-35dt\TouchScreen 5-4-16\TouchScreen 5-4-16.4DWork\TouchScreen 5-4-16Const.inc

005219  000007  #inherit "TouchScreen 5-4-16Const.inc"
005220  000007  #inherit "TouchScreen 5-4-16Const.inc"
005221  000001  // File generated 4/4/2017 11:34:12 AM
005222  000002  // Warning! This is a generated file, any manual changes will be
005223  000003  // lost during the next generation.
005224  000004        
005225  000005  // object indexes into ImageControl
005226  000006  #CONST
005227  000268  #END
005228  000269        
005229  000270  #IFNOT EXISTS NOGLOBALS
005230  000271  var hndl ;
005231  000272  #ENDIF
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\LEDDIGITSDISPLAY.inc

005232  000008  #inherit "LEDDIGITSDISPLAY.inc"
005233  000008  #inherit "LEDDIGITSDISPLAY.inc"
005234  000001  // WARNING, this code will crash if newval exceeds maximum displayable number
005235  000002  func ledDigitsDisplay(var newval, var index, var left, var Digits, var MinDigits, var WidthDigit, var LeadingBlanks)
005236  000003      var i, k, l, lb ;
005237  000004      l := 1 ;
005238  000005      for (i := 1; i < Digits; i++)
005239  000006          l *= 10 ;
005240  000007      next
005241  000008      lb := LeadingBlanks ;
005242  000009      for (i := 0; i < Digits; i++)
005243  000010          k := newval / l ;
005244  000011          newval -= k * l ;
005245  000012          if ( lb && (i < Digits - MinDigits) )
005246  000013              if (k == 0)
005247  000014                  k := 10 ;
005248  000015              else
005249  000016                  lb := 0 ;
005250  000017              endif
005251  000018          endif
005252  000019          l /= 10 ;
005253  000020          img_SetWord(hndl, index, IMAGE_INDEX, k);
005254  000021          img_SetWord(hndl, index, IMAGE_XPOS, left+i*WidthDigit) ;
005255  000022          img_Show(hndl, index);
005256  000023      next
005257  000024  endfunc
005258  000025        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\PrintDisk.inc

005259  000009  #inherit "PrintDisk.inc"
005260  000009  #inherit "PrintDisk.inc"
005261  000001        
Notice: in func 'PrintDisk' function argument 'hndl' shadows global var with same name (line 2 file:PrintDisk.inc)
005262  000002  func PrintDisk(var hndl, var offsh, var offsl, var msglen, var msgid)
005263  000003      var ch, offs32[2], res32[2];
005264  000004      umul_1616(offs32, msglen, msgid);
005265  000005      res32[1] := offsh ;
005266  000006      res32[0] := offsl ;
005267  000007      uadd_3232(res32,res32,offs32) ;
005268  000008      file_Seek(hndl, res32[1], res32[0]);
005269  000009      repeat
005270  000010          ch := file_GetC(hndl) ;
005271  000011          putch(ch) ;
005272  000012      until (ch == 0) ;
005273  000013  endfunc
005274  000014        
Notice: in func 'PrintDiskUnicode' function argument 'hndl' shadows global var with same name (line 15 file:PrintDisk.inc)
005275  000015  func PrintDiskUnicode(var hndl, var offsh, var offsl, var msglen, var msgid)
005276  000016      var ch, offs32[2], res32[2];
005277  000017      umul_1616(offs32, msglen, msgid);
005278  000018      res32[1] := offsh ;
005279  000019      res32[0] := offsl ;
005280  000020      uadd_3232(res32,res32,offs32) ;
005281  000021      file_Seek(hndl, res32[1], res32[0]);
005282  000022      repeat
005283  000023          ch := file_GetW(hndl) ;
005284  000024          putch(ch) ;
005285  000025      until (ch == 0) ;
005286  000026  endfunc
005287  000027        
005288  000011  */
005289  000012        
005290  000013  /******** Functions list ********/
005291  000014        
005292  000015        
005293  000016        
005294  000017  ///Serial Functions ///
005295  000018        
005296  000019  #constant MSG_ACK '!'  //message acknowledged character
005297  000019  #constant MSG_ACK '!'  //message acknowledged character
005298  000020  #constant PIN_LENGTH 6  //Length of the User Pin
005299  000020  #constant PIN_LENGTH 6  //Length of the User Pin
005300  000021        
005301  000022  #constant SETUP_MESSAGE 'S'  //Length of the User Pin
005302  000022  #constant SETUP_MESSAGE 'S'  //Length of the User Pin
005303  000023  #constant SETUP_MESSAGE_LENGTH 9  //Length of setup message NOT INCLUDING CONTROL CHAR
005304  000023  #constant SETUP_MESSAGE_LENGTH 9  //Length of setup message NOT INCLUDING CONTROL CHAR
005305  000024  #constant CELL_STRENGTH_MESSAGE 'C'  //Length of the User Pin
005306  000024  #constant CELL_STRENGTH_MESSAGE 'C'  //Length of the User Pin
005307  000025  #constant CELL_STRENGTH_MESSAGE_LENGTH 1  //Length of cell strength message NOT INCLUDING CONTROL CHAR
005308  000025  #constant CELL_STRENGTH_MESSAGE_LENGTH 1  //Length of cell strength message NOT INCLUDING CONTROL CHAR
005309  000026  #constant CHECK_PIN_MESSAGE 'P'  //Length of the User Pin
005310  000026  #constant CHECK_PIN_MESSAGE 'P'  //Length of the User Pin
005311  000027  #constant CHECK_PIN_MESSAGE_LENGTH 1  //Length of the check message Response - NOT INCLUDING CONTROL CHAR
005312  000027  #constant CHECK_PIN_MESSAGE_LENGTH 1  //Length of the check message Response - NOT INCLUDING CONTROL CHAR
005313  000028  #constant BEGIN_TREATMENT_MESSAGE 'X'  //Signals the arduino to begin treatment (followed by treatment data)
005314  000028  #constant BEGIN_TREATMENT_MESSAGE 'X'  //Signals the arduino to begin treatment (followed by treatment data)
005315  000029  #constant SERIAL_TIMEOUT 30000  //Length of time before tiemout in Serial comms. In miliseconds
005316  000029  #constant SERIAL_TIMEOUT 30000  //Length of time before tiemout in Serial comms. In miliseconds
005317  000030  #constant SERIAL_TIMEOUT_ITERATOR 100  //Length of time in timeout loop before checking Serial again
005318  000030  #constant SERIAL_TIMEOUT_ITERATOR 100  //Length of time in timeout loop before checking Serial again
005319  000031  #constant MAX_8BIT_VALUE 255  //max value that can be held by one var sent from the arduino
005320  000031  #constant MAX_8BIT_VALUE 255  //max value that can be held by one var sent from the arduino
005321  000032        
005322  000033  #constant CELL_STRENGTH_NONE 0 //Minimum value for cell strength
005323  000033  #constant CELL_STRENGTH_NONE 0 //Minimum value for cell strength
005324  000034  #constant CELL_STRENGTH_UPPERBOUND 4 //Maximum value for cell strength
005325  000034  #constant CELL_STRENGTH_UPPERBOUND 4 //Maximum value for cell strength
005326  000035        
005327  000036  #constant TRUE 1
005328  000036  #constant TRUE 1
005329  000037  #constant FALSE 0
005330  000037  #constant FALSE 0
005331  000038        
005332  000039  #constant TREATMENT_UPDATE_MESSAGE 'U' //signals the screen that treatment values are being updated
005333  000039  #constant TREATMENT_UPDATE_MESSAGE 'U' //signals the screen that treatment values are being updated
005334  000040  #constant TREATMENT_UPDATE_MESSAGE_LENGTH 9 //Length of update message NOT INCLUDING CONTROL CHAR
005335  000040  #constant TREATMENT_UPDATE_MESSAGE_LENGTH 9 //Length of update message NOT INCLUDING CONTROL CHAR
005336  000041        
005337  000042  #constant EMERGENCY_STOP_MESSAGE 'E' //Signals the Arduino to emergency stop without cool-down
005338  000042  #constant EMERGENCY_STOP_MESSAGE 'E' //Signals the Arduino to emergency stop without cool-down
005339  000043  #constant NORMAL_STOP_MESSAGE 'T' //Signals the arduino to stop the treatment normally (with cool down)
005340  000043  #constant NORMAL_STOP_MESSAGE 'T' //Signals the arduino to stop the treatment normally (with cool down)
005341  000044        
005342  000045  #constant ARDUINO_RESET_INIT 'R' //first of two characters that tell the arduino to reset
005343  000045  #constant ARDUINO_RESET_INIT 'R' //first of two characters that tell the arduino to reset
005344  000046  #constant ARDUINO_RESET_CONFIRM 'Y' //second of two characters that tell the arduino to reset
005345  000046  #constant ARDUINO_RESET_CONFIRM 'Y' //second of two characters that tell the arduino to reset
005346  000047  #constant SCREEN_STATUS_COMPLETE 'K' //Signal the screen that the treatment has ended and everything is okay
005347  000047  #constant SCREEN_STATUS_COMPLETE 'K' //Signal the screen that the treatment has ended and everything is okay
005348  000048  #constant SCREEN_COOLDOWN 'D' //arduino send this to indicate that the system is cooling down.  Message should include time remaining in seconds.
005349  000048  #constant SCREEN_COOLDOWN 'D' //arduino send this to indicate that the system is cooling down.  Message should include time remaining in seconds.
005350  000049  #constant SCREEN_COOLDOWN_MESSAGE_LENGTH 1  //Length of cell strength message NOT INCLUDING CONTROL CHAR
005351  000049  #constant SCREEN_COOLDOWN_MESSAGE_LENGTH 1  //Length of cell strength message NOT INCLUDING CONTROL CHAR
005352  000050        
005353  000051  #constant BOOT_ERROR_MSG 'B' //indicates a boot error.  Created to send a message indicating cell modem boot errors.
005354  000051  #constant BOOT_ERROR_MSG 'B' //indicates a boot error.  Created to send a message indicating cell modem boot errors.
005355  000052        
005356  000053  #constant UPDATE_CELL_STRENGTH 'M' //collects updated cell stregth message
005357  000053  #constant UPDATE_CELL_STRENGTH 'M' //collects updated cell stregth message
005358  000054        
005359  000055  #constant INITATE_PROBE 'I' //initates probe connection
005360  000055  #constant INITATE_PROBE 'I' //initates probe connection
005361  000056  #constant REINITATE_PROBE_IDENTIFICATION 'W' //initates probe connection
005362  000056  #constant REINITATE_PROBE_IDENTIFICATION 'W' //initates probe connection
005363  000057        
005364  000058  #constant SEND_LOG_FILES 'L' //sends log files to ZappBug
005365  000058  #constant SEND_LOG_FILES 'L' //sends log files to ZappBug
005366  000059        
005367  000060  #constant WAITING_TO_BEGIN 0  //indicates that all systems are nominal and waiting to begin treatment
005368  000060  #constant WAITING_TO_BEGIN 0  //indicates that all systems are nominal and waiting to begin treatment
005369  000061  #constant STATUS_NOMINAL 1 //indicates that treatment is ongoing and all systems are nominal
005370  000061  #constant STATUS_NOMINAL 1 //indicates that treatment is ongoing and all systems are nominal
005371  000062  #constant STATUS_COMPLETE_OK 2 //indicates that the treatment was completed successfully
005372  000062  #constant STATUS_COMPLETE_OK 2 //indicates that the treatment was completed successfully
005373  000063  #constant STATUS_POWER_LOSS 3 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005374  000063  #constant STATUS_POWER_LOSS 3 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005375  000064  #constant STATUS_COMM_LOSS 4 //indicates communication loss with the ombitron server
005376  000064  #constant STATUS_COMM_LOSS 4 //indicates communication loss with the ombitron server
005377  000065  #constant STATUS_STOPPED_USER 5 //indicates that the treatment was terminated by the user
005378  000065  #constant STATUS_STOPPED_USER 5 //indicates that the treatment was terminated by the user
005379  000066  #constant STATUS_UNABLE_TO_HEAT 6 // Device indicated that it is unable to reach the desired target temperature
005380  000066  #constant STATUS_UNABLE_TO_HEAT 6 // Device indicated that it is unable to reach the desired target temperature
005381  000067  #constant STATUS_STOPPED_EMERGENCY 7 //User initiates emergency stop to stop treatment without cool-down
005382  000067  #constant STATUS_STOPPED_EMERGENCY 7 //User initiates emergency stop to stop treatment without cool-down
005383  000068  #constant STATUS_POWER_LOSS_2 8 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005384  000068  #constant STATUS_POWER_LOSS_2 8 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005385  000069  #constant STATUS_POWER_LOSS_3 9 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005386  000069  #constant STATUS_POWER_LOSS_3 9 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005387  000070  #constant STATUS_POWER_LOSS_4 10 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005388  000070  #constant STATUS_POWER_LOSS_4 10 //indicates a power loss on one of the lines.  Use Treatment Error to identify the specific line.
005389  000071  #constant STATUS_PROBE_ERROR 11 //indicates probe error.
005390  000071  #constant STATUS_PROBE_ERROR 11 //indicates probe error.
005391  000072  #constant STATUS_PROBE_COMM_LOSS 12
005392  000072  #constant STATUS_PROBE_COMM_LOSS 12
005393  000073  #constant STATUS_PROBE_INITIATION 13 //Idicaties probe initiation error
005394  000073  #constant STATUS_PROBE_INITIATION 13 //Idicaties probe initiation error
005395  000074  #constant TREATMENT_CLEAR 0 //Indicated the treatment status is okay and there are no power loss
005396  000074  #constant TREATMENT_CLEAR 0 //Indicated the treatment status is okay and there are no power loss
005397  000075        
005398  000076        
005399  000077  #constant CELL_BOOT_ERROR_COMM 2  //indicates that the cell modem is not communicating with the Arduino after CELL_BOOT_COMM_TIMEOUT time.
005400  000077  #constant CELL_BOOT_ERROR_COMM 2  //indicates that the cell modem is not communicating with the Arduino after CELL_BOOT_COMM_TIMEOUT time.
005401  000078  #constant CELL_BOOT_ERROR_NETWORK 3 //indicates that the cell modem has not established a network connection after CELL_BOOT_NETWORK_TIMEOUT time.
005402  000078  #constant CELL_BOOT_ERROR_NETWORK 3 //indicates that the cell modem has not established a network connection after CELL_BOOT_NETWORK_TIMEOUT time.
005403  000079        
005404  000080  /////Version control////////////
005405  000081  #constant VERSION_SCREEN_MAJOR 1
005406  000081  #constant VERSION_SCREEN_MAJOR 1
005407  000082  #constant VERSION_SCREEN_MINOR 0
005408  000082  #constant VERSION_SCREEN_MINOR 0
005409  000083  #constant VERSION_SCREEN_PATCH 2 //small edits
005410  000083  #constant VERSION_SCREEN_PATCH 2 //small edits
005411  000084        
005412  000085        
005413  000086        
005414  000087  #constant CELL_VERSION_MESSAGE 'V' //Collections the Version of the Cell being used
005415  000087  #constant CELL_VERSION_MESSAGE 'V' //Collections the Version of the Cell being used
005416  000088  #constant ARDUINO_VERSION_MESSAGE 'A' //collects the Version of the Arduino
005417  000088  #constant ARDUINO_VERSION_MESSAGE 'A' //collects the Version of the Arduino
005418  000089        
005419  000090  #constant CHECK_VERSION_MESSAGE_LENGTH 3
005420  000090  #constant CHECK_VERSION_MESSAGE_LENGTH 3
005421  000091        
005422  000092  //Probe Identification numbers
005423  000093        
005424  000094  #constant PROBE_AIR_TEMP 0
005425  000094  #constant PROBE_AIR_TEMP 0
005426  000095  #constant PROBE_01 1
005427  000095  #constant PROBE_01 1
005428  000096  #constant PROBE_02 2
005429  000096  #constant PROBE_02 2
005430  000097  #constant PROBE_03 3
005431  000097  #constant PROBE_03 3
005432  000098  #constant PROBE_SUCCESSFULLY_IDENTIFIED 4
005433  000098  #constant PROBE_SUCCESSFULLY_IDENTIFIED 4
005434  000099  #constant PROBE_UNSUCCESSFULLY_IDENTIFIED 5
005435  000099  #constant PROBE_UNSUCCESSFULLY_IDENTIFIED 5
005436  000100  #constant PROBE_INITIATION_COMPLETE 6
005437  000100  #constant PROBE_INITIATION_COMPLETE 6
005438  000101        
005439  000102        
005440  000103        
005441  000104  ////////form and switch case constants/////////
005442  000105  #constant FORM_1_LOADING_SCREEN 1
005443  000105  #constant FORM_1_LOADING_SCREEN 1
005444  000106  #constant FORM_2_WELCOME_SCREEN 2
005445  000106  #constant FORM_2_WELCOME_SCREEN 2
005446  000107  #constant FORM_3_CIRCUITS 3
005447  000107  #constant FORM_3_CIRCUITS 3
005448  000108  #constant FORM_4_BREAKERS 4
005449  000108  #constant FORM_4_BREAKERS 4
005450  000109  #constant FORM_5_TEMP_SETTINGS 5
005451  000109  #constant FORM_5_TEMP_SETTINGS 5
005452  000110  #constant FORM_6_ENABLE_CELL 6
005453  000110  #constant FORM_6_ENABLE_CELL 6
005454  000111  #constant FORM_7_CURRENT_PIN 7
005455  000111  #constant FORM_7_CURRENT_PIN 7
005456  000112  #constant FORM_8_MODIFY_PIN 8
005457  000112  #constant FORM_8_MODIFY_PIN 8
005458  000113  #constant FORM_9_UNABLE_TO_CONNECT_MODEM 9
005459  000113  #constant FORM_9_UNABLE_TO_CONNECT_MODEM 9
005460  000114  #constant FORM_23_UNABLE_TO_CONNECT_NETWORK 23
005461  000114  #constant FORM_23_UNABLE_TO_CONNECT_NETWORK 23
005462  000115        
005463  000116  #constant FORM_10_START_TREATMENT 10
005464  000116  #constant FORM_10_START_TREATMENT 10
005465  000117  #constant FORM_11_CURRENT_RESULTS 11
005466  000117  #constant FORM_11_CURRENT_RESULTS 11
005467  000118  #constant FORM_12_MENU 12
005468  000118  #constant FORM_12_MENU 12
005469  000119  #constant FORM_13_SELECTION_REMINDER 13
005470  000119  #constant FORM_13_SELECTION_REMINDER 13
005471  000120  #constant FORM_14_INVALID_PIN 14
005472  000120  #constant FORM_14_INVALID_PIN 14
005473  000121  #constant FORM_15_STOP_TREATMENT 15
005474  000121  #constant FORM_15_STOP_TREATMENT 15
005475  000122  #constant FORM_16_ERRORS 16
005476  000122  #constant FORM_16_ERRORS 16
005477  000123  #constant FORM_17_TREATMENT_SUCCESSFUL 17
005478  000123  #constant FORM_17_TREATMENT_SUCCESSFUL 17
005479  000124  #constant FORM_18_TREATMENT_RESULTS 18
005480  000124  #constant FORM_18_TREATMENT_RESULTS 18
005481  000125  #constant FORM_19_COUNTDOWN_TO_SHUT_OFF 19
005482  000125  #constant FORM_19_COUNTDOWN_TO_SHUT_OFF 19
005483  000126  #constant FORM_20_EMERGENCY_SHUTDOWN 20
005484  000126  #constant FORM_20_EMERGENCY_SHUTDOWN 20
005485  000127  #constant FORM_21_UTILITIES 21
005486  000127  #constant FORM_21_UTILITIES 21
005487  000128  #constant FORM_22_ESTABLISHING_CONNECTION 22
005488  000128  #constant FORM_22_ESTABLISHING_CONNECTION 22
005489  000129  #constant FORM_24_IDENTIFYING_PROBES 24
005490  000129  #constant FORM_24_IDENTIFYING_PROBES 24
005491  000130  #constant FORM_25_PROBE_IDENTIFICATION_COMPLETE 25
005492  000130  #constant FORM_25_PROBE_IDENTIFICATION_COMPLETE 25
005493  000131  #constant FORM_26_REIDENTIFY_PROBES 26
005494  000131  #constant FORM_26_REIDENTIFY_PROBES 26
005495  000132  #constant FORM_27_SEND_LOG_FILES 27
005496  000132  #constant FORM_27_SEND_LOG_FILES 27
005497  000133  #constant FORM_28_NO_CELL_DURING_TREATMENT 28
005498  000133  #constant FORM_28_NO_CELL_DURING_TREATMENT 28
005499  000134        
005500  000135  ////////temp constants
005501  000136  #constant MIN_mAirTemp 120
005502  000136  #constant MIN_mAirTemp 120
005503  000137  #constant MAX_mAirTemp 160
005504  000137  #constant MAX_mAirTemp 160
005505  000138  #constant MIN_tAtTarget 10
005506  000138  #constant MIN_tAtTarget 10
005507  000139  #constant MAX_tAtTarget 255
005508  000139  #constant MAX_tAtTarget 255
005509  000140  #constant MAX_tTemp 140
005510  000140  #constant MAX_tTemp 140
005511  000141  #constant MIN_tTemp 120
005512  000141  #constant MIN_tTemp 120
005513  000142        
005514  000143  #constant CIRCUITS_2 2
005515  000143  #constant CIRCUITS_2 2
005516  000144  #constant CIRCUITS_3 3
005517  000144  #constant CIRCUITS_3 3
005518  000145  #constant BREAKERS_15 15
005519  000145  #constant BREAKERS_15 15
005520  000146  #constant BREAKERS_20 20
005521  000146  #constant BREAKERS_20 20
005522  000147        
005523  000148  #constant CELL_TIMED_OUT 3 //this gives a third value to the validation of the pin so lets the user know it is different error than invalid or valid most likely modem connection error
005524  000148  #constant CELL_TIMED_OUT 3 //this gives a third value to the validation of the pin so lets the user know it is different error than invalid or valid most likely modem connection error
005525  000149  #constant PIN_VALIDATION_ERROR 4 //gives a fall back incase serial input is read wrong when validading the pin
005526  000149  #constant PIN_VALIDATION_ERROR 4 //gives a fall back incase serial input is read wrong when validading the pin
005527  000150        
005528  000151  //global variables
005529  000152  var serBuff[32];
005530  000153  var serBuffTx[64];
005531  000154        
005532  000155  /////Global Vars////
005533  000156  var state1 := 1;
005534  000157  var state := 0;
005535  000158  var currentForm := 0;
005536  000159  var cellEnableForm :=0;
005537  000160  var setForm;
005538  000161  var backBtnSrc;
005539  000162  var k :=0;
005540  000163  var j :=0;
005541  000164  var VERSION_CELL_MAJOR := 0;
005542  000165  var VERSION_CELL_MINOR := 0;
005543  000166  var VERSION_CELL_PATCH := 0;
005544  000167        
005545  000168  var VERSION_ARDUINO_MAJOR := 0;
005546  000169  var VERSION_ARDUINO_MINOR := 0;
005547  000170  var VERSION_ARDUINO_PATCH := 0;
005548  000171        
005549  000172        
005550  000173  //////Serial Global
005551  000174  var nCircuits:= FALSE;
005552  000175  var cBreakers := FALSE;
005553  000176  var tTemp := 120;   //f
005554  000177  var mAirTemp := 160;  //
005555  000178  var tAtTarget := 30;  //
005556  000179  var cellOnBoard := 0;  //defaults to no cell modem in unit unless otherwise indicated by the arduino
005557  000180  var cellEnabled := 0;  //indicates if cell is enabled for this treatment. Only if requested by user and pin is valid.
005558  000181  var cellPin[PIN_LENGTH];
005559  000182  var cellSignalStrength := 0; //default to no signal.  Arduino must send signal strength > 0 for cell to be used
005560  000183  var TimeElapsedHrs := 0;
005561  000184  var TimeElapsedMin := 0;
005562  000185  var etaHrs := 0;
005563  000186  var etaMin := 43;
005564  000187  var TEMP_ARRAY[4] := [24,135,124,136];  //Format AirTemp,Probe1,Probe2,Probe3
5565  000E
5566  000F
5567  0010
5568  0011
5569  0012
5570  0013
5571  0014
5572  0015
005573  000188  var backBtnArray[6]:=[FORM_1_LOADING_SCREEN, FORM_2_WELCOME_SCREEN, FORM_3_CIRCUITS, FORM_4_BREAKERS, FORM_5_TEMP_SETTINGS, FORM_6_ENABLE_CELL];
5574  001A
5575  001B
5576  001C
5577  001D
5578  001E
5579  001F
5580  0020
5581  0021
5582  0022
5583  0023
5584  0024
5585  0025
005586  000189        
005587  000190  var treatmentStatus;
005588  000191  var runCurrentUpdate := 1;
005589  000192  var cellMonitoring := 1;
005590  000193  var previousLink := 2;
005591  000194  var PrevFormErrorIdenification := FORM_2_WELCOME_SCREEN;
005592  000195  var thisSignalStrength;
005593  000196  var bootMessage := 0;
005594  000197  var cellConnectionMsg := -1;
005595  000198  var conectionHasHappened := 0;
005596  000199  var establishingConnection_choice := -1;
005597  000200  var probe_idenification_number := 6;
005598  000201  var statusErrors := -1;
005599  000202        
005600  000203        
005601  000204  func main()
005602  000205   var hstrings ; // Handle to access uSD strings, uncomment if required
005603  000206    var hFontn ;   // Handle to access uSD fonts, uncomment if required and change n to font number
005604  000207        
005605  000208        
005606  000209        
005607  000210  touch_Set(TOUCH_ENABLE);
005608  000211      gfx_Set(SCREEN_MODE,LANDSCAPE) ;
005609  000212      //snd_Volume(127);
005610  000213        
005611  000214          while(!(file_Mount()))
005612  000215              pause(100);
005613  000216          wend
005614  000217     gfx_TransparentColour(0x0020);    // uncomment if transparency required
005615  000218     gfx_Transparency(ON);             // uncomment if transparency required
005616  000219        
005617  000220      hFontn := file_LoadImageControl("TOUCHS~1.dan", "TOUCHS~1.gcn", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
005618  000221      hstrings := file_Open("TOUCHS~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
005619  000222      hndl := file_LoadImageControl("TOUCHS~1.dat", "TOUCHS~1.gci", 1);
005620  000223        
005621  000224        
005622  000225   //Loading screen
005623  000226           img_Show(hndl,iLoadingBG) ;
005624  000227           img_Show(hndl,iLoadingText) ;
005625  000228        
005626  000229        
005627  000230      //Setup comms
005628  000231      setbaud(BAUD_57600);    //  9600 baud comms
005629  000232      // set up a comms circular buffer, use the entire buffer, no sync character
005630  000233      var combuf[24];    // 24 vars = 48 bytes
005631  000234      com_Init(serBuff, 64, 0);
005632  000235      com_TXbuffer(serBuffTx, 64, 0);
005633  000236        
005634  000237        
005635  000238      //Setup comms
005636  000239      COM1_RX_pin(PA0);//Pins used on the
005637  000240      COM1_TX_pin(PA1);
005638  000241      com_SetBaud(COM1, 57600);
005639  000242      com1_Init(serBuff, 64, 0);
005640  000243      com1_TXbuffer(serBuffTx, 64, 0);
005641  000244        
005642  000245     //Boot Sequence/////////////////////////////
005643  000246        
005644  000247      //Initialize Serial Communication with the Arduino
005645  000248      init_Serial_Comm();  //Waits for a ping and responds with a ping
005646  000249        
005647  000250      repeat
005648  000251        
005649  000252          touchEventHandler();
005650  000253        
005651  000254          check_Incoming_Serial();
005652  000255      forever
005653  000256  endfunc
005654  000257        
005655  000258        
005656  000259  func touchEventHandler()
005657  000260      //check screen for a touch
005658  000261      var touchState;
005659  000262      var cellPinValid := FALSE;
005660  000263      touchState := touch_Get(TOUCH_STATUS);
005661  000264        
005662  000265      //Screen is touched
005663  000266      if(touchState != NOTOUCH)
005664  000267        
005665  000268          //check to see if a button was touched
005666  000269          var touchImgIndex;
005667  000270          touchImgIndex := getImgIndex();
005668  000271        
005669  000272          //if a button has been pressed and released do action
005670  000273          if(touchState == TOUCH_RELEASED)
005671  000274        
005672  000275              switch (currentForm)
005673  000276        
005674  000277                    case FORM_2_WELCOME_SCREEN: //Welcome Form
005675  000278                      if(touchImgIndex == iyesBtn_welcome)
005676  000279                          btnPressAndRelease(iyesBtn_welcome);
005677  000280                          previousLink := FORM_3_CIRCUITS;
005678  000281                          currentForm := FORM_3_CIRCUITS;
005679  000282                          gotoCurrentForm(0);
005680  000283                      endif
005681  000284                  break;
005682  000285        
005683  000286                  case FORM_3_CIRCUITS: //Circuit Form
005684  000287        
005685  000288                       switch(touchImgIndex)
005686  000289                           case i2circuitsBtn:
005687  000290                              switchBtnPress(i2circuitsBtn, i3circuitsBtn);
005688  000291                              nCircuits := BtnNumber(touchImgIndex);
005689  000292                          break;
005690  000293        
005691  000294                          case i3circuitsBtn:
005692  000295                              switchBtnPress(i3circuitsBtn, i2circuitsBtn);
005693  000296                              nCircuits := BtnNumber(touchImgIndex);
005694  000297                          break;
005695  000298                ///*********** MENU  ***************//
005696  000299                          case inextBtn_circuits:
005697  000300                              if (nCircuits == CIRCUITS_2 || nCircuits == CIRCUITS_3)
005698  000301                                  btnPressAndRelease(inextBtn_circuits);
005699  000302                                   previousLink := FORM_3_CIRCUITS;
005700  000303                                  currentForm := fwrdBtn(FORM_3_CIRCUITS);
005701  000304                                  gotoCurrentForm(0);
005702  000305                              else
005703  000306                                  btnPressAndRelease(inextBtn_circuits);
005704  000307                                  selectBtn(icircuitsSelectText, 3); //takes you to the "please select 'option' form"
005705  000308                              endif
005706  000309                          break;
005707  000310        
005708  000311                          case imenuBtn_circuits:
005709  000312                              btnPressAndRelease(imenuBtn_circuits);
005710  000313                              currentForm := FORM_21_UTILITIES;
005711  000314                              gotoCurrentForm(0);
005712  000315                          break;
005713  000316                      endswitch
005714  000317                  break;
005715  000318        
005716  000319        
005717  000320                  case FORM_4_BREAKERS: //Amp Form
005718  000321                      switch(touchImgIndex)
005719  000322                      case i15ampsBtn:
005720  000323                          switchBtnPress( i15ampsBtn, i20ampsBtn);
005721  000324                          cBreakers := BtnNumber(touchImgIndex);
005722  000325                      break;
005723  000326                     case i20ampsBtn:
005724  000327                          switchBtnPress( i20ampsBtn, i15ampsBtn );
005725  000328                          cBreakers :=  BtnNumber(touchImgIndex);
005726  000329                    break;
005727  000330                 ///************* MENU  ****************//
005728  000331                      case inextBtn_amps:
005729  000332                          if (cBreakers == BREAKERS_15 || cBreakers == BREAKERS_20)
005730  000333                              btnPressAndRelease(inextBtn_amps);
005731  000334                              currentForm := fwrdBtn(FORM_4_BREAKERS);
005732  000335                              gotoCurrentForm(0);
005733  000336                          else
005734  000337                              btnPressAndRelease(inextBtn_amps);
005735  000338                              selectBtn(iampSelectText, 4); //takes you to the "please select 'option' form"
005736  000339                          endif
005737  000340                       break;
005738  000341        
005739  000342                      case ibackBtn_amps:
005740  000343                          btnPressAndRelease(ibackBtn_amps);
005741  000344                          currentForm :=  backBtn(FORM_4_BREAKERS);
005742  000345                          gotoCurrentForm(0);
005743  000346                      break;
005744  000347        
005745  000348                      case imenuBtn_amps:
005746  000349                          btnPressAndRelease(imenuBtn_amps);
005747  000350                          previousLink := FORM_4_BREAKERS;
005748  000351                          currentForm := FORM_21_UTILITIES;
005749  000352                         gotoCurrentForm(0);
005750  000353                      break;
005751  000354                      endswitch
005752  000355                  break;
005753  000356        
005754  000357                  case FORM_5_TEMP_SETTINGS: //Temp Set form
005755  000358        
005756  000359                      switch(touchImgIndex)
005757  000360                          case iminusBtn_targetTemp_tempSet: /////////115 <= targetTemp <= 135, increment by 5 //////////
005758  000361                              tempBtnHighlight(iminusBtn_targetTemp_tempSet);
005759  000362                              tTempMinusBuffer ();
005760  000363                          break;
005761  000364                      case iaddBtn_targetTemp_tempSet:
005762  000365                          tempBtnHighlight(iaddBtn_targetTemp_tempSet);
005763  000366                          tTempAddBuffer ();
005764  000367                       break;
005765  000368                     case iminusBtn_maxAirTemp_tempSet:
005766  000369                          tempBtnHighlight(iminusBtn_maxAirTemp_tempSet);
005767  000370                          if (mAirTemp > MIN_mAirTemp) mAirTemp -= 5;
005768  000371                              ledDigitsDisplay(mAirTemp, imaxAirTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
005769  000372                              tTempMinusBuffer_02 ();
005770  000373                       break;
005771  000374                      case iaddBtn_maxAirTemp_tempSet:
005772  000375                          tempBtnHighlight(iaddBtn_maxAirTemp_tempSet);
005773  000376                          if(mAirTemp < MAX_mAirTemp) mAirTemp += 5;
005774  000377                              ledDigitsDisplay(mAirTemp, imaxAirTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
005775  000378                       break;
005776  000379                      case iminusBtn_timeAtTarget_tempSet:
005777  000380                          tempBtnHighlight(iminusBtn_timeAtTarget_tempSet);
005778  000381                          if (tAtTarget > MIN_tAtTarget) tAtTarget -= 5;
005779  000382                              ledDigitsDisplay(tAtTarget, itimeAtTargetDigits_tempSet+1, 59, 3, 1, 33, 1) ;
005780  000383                        break;
005781  000384                      case iaddBtn_timeAtTarget_tempSet:
005782  000385                          tempBtnHighlight(iaddBtn_timeAtTarget_tempSet);
005783  000386                          if (tAtTarget < MAX_tAtTarget) tAtTarget += 5;
005784  000387                              ledDigitsDisplay(tAtTarget, itimeAtTargetDigits_tempSet+1, 59, 3, 1, 33, 1) ;
005785  000388                      break;
005786  000389              ///******** MENU  **************8//
005787  000390                      case ibackBtn__tempSet:
005788  000391                          btnPressAndRelease(ibackBtn__tempSet);
005789  000392                            currentForm :=  backBtn(FORM_5_TEMP_SETTINGS);
005790  000393                          gotoCurrentForm(0);
005791  000394                      break;
005792  000395                      case inextBtn__tempSet:
005793  000396                            btnPressAndRelease(inextBtn__tempSet);
005794  000397                            previousLink := FORM_5_TEMP_SETTINGS;
005795  000398                          if (cellOnBoard == TRUE)  //If there is ----NOT---- a cell connection skip to form #######
005796  000399                              if (conectionHasHappened == FALSE)
005797  000400                                  conectionHasHappened := TRUE;
005798  000401                                  setForm := FORM_22_ESTABLISHING_CONNECTION;
005799  000402                              else if (conectionHasHappened == TRUE && cellSignalStrength > 0)
005800  000403                                  setForm := FORM_6_ENABLE_CELL;
005801  000404                              else
005802  000405                                  setForm := FORM_23_UNABLE_TO_CONNECT_NETWORK;
005803  000406                              endif
005804  000407        
005805  000408                             // searchForCellConnectionMsg();
005806  000409                              //If there IS a cell connection go to "enable cell?" question form 6
005807  000410                          else if (cellOnBoard == FALSE)
005808  000411                              setForm := FORM_10_START_TREATMENT ;
005809  000412                          endif
005810  000413                          currentForm := setForm;
005811  000414                          gotoCurrentForm(0);
005812  000415                      break;
005813  000416        
005814  000417                      case imenuBtn__tempSet:
005815  000418                           btnPressAndRelease(imenuBtn__tempSet);
005816  000419                           previousLink := FORM_5_TEMP_SETTINGS;
005817  000420                          currentForm := FORM_21_UTILITIES;
005818  000421                         gotoCurrentForm(0);
005819  000422                      break;
005820  000423                  endswitch
005821  000424                  break;
005822  000425        
005823  000426                   case FORM_22_ESTABLISHING_CONNECTION:
005824  000427                      switch(touchImgIndex)
005825  000428                      case iContWithoutCell_btn:
005826  000429                          btnPressAndRelease(iContWithoutCell_btn);
005827  000430                          cellMonitoring:=FALSE;
005828  000431                          establishingConnection_choice := FALSE;
005829  000432                              currentForm := FORM_10_START_TREATMENT;
005830  000433                              gotoCurrentForm(0);
005831  000434                      break;
005832  000435                      endswitch
005833  000436        
005834  000437                   break;
005835  000438        
005836  000439                  case FORM_6_ENABLE_CELL: //Enable Cell Form
005837  000440        
005838  000441                       //cellMonitoring:=TRUE;
005839  000442                      switch(touchImgIndex)
005840  000443                      case iyesBtn_enableCell:
005841  000444                          cellMonitoring:=TRUE;
005842  000445                          previousLink := FORM_6_ENABLE_CELL;
005843  000446                          switchBtnPress(iyesBtn_enableCell, inoBtn_enableCell);
005844  000447                         // thisSignalStrength := cellSignalStrength;
005845  000448                             // print(thisSignalStrength);
005846  000449                            //  pause(3000);
005847  000450                             if (establishingConnection_choice == FALSE)
005848  000451                           //  print("establishing connection Choice False");
005849  000452                               btnPressReset(iyesBtn_enableCell);
005850  000453                               currentForm := establishingConnectionReconnectEnabled();
005851  000454                                gotoCurrentForm(0);
005852  000455                             else if(cellSignalStrength > 0)
005853  000456                                   btnPressReset(iyesBtn_enableCell);
005854  000457                                  currentForm := FORM_7_CURRENT_PIN;
005855  000458                                  gotoCurrentForm(0);
005856  000459                              else
005857  000460                                  currentForm := FORM_23_UNABLE_TO_CONNECT_NETWORK;
005858  000461                                  btnPressReset(iyesBtn_enableCell);    //clears button press
005859  000462                                  gotoCurrentForm(0);
005860  000463                                  cellMonitoring:=FALSE;
005861  000464                              endif
005862  000465                          break;
005863  000466        
005864  000467                      case inoBtn_enableCell:
005865  000468                           cellEnabled := FALSE;
005866  000469                          cellMonitoring:=FALSE;
005867  000470                         switchBtnPress(inoBtn_enableCell, iyesBtn_enableCell);
005868  000471                         previousLink := FORM_6_ENABLE_CELL;
005869  000472                              currentForm := FORM_10_START_TREATMENT;
005870  000473                              gotoCurrentForm(0);
005871  000474                              btnPressReset(inoBtn_enableCell);  //clears button press
005872  000475        
005873  000476                          break ;
005874  000477        
005875  000478              ///************* MENU  *****************//
005876  000479                      case ibackBtn_enableCell:
005877  000480                          btnPressAndRelease(ibackBtn_enableCell);
005878  000481                          cellMonitoring:=FALSE;
005879  000482                          currentForm :=  backBtn(FORM_6_ENABLE_CELL);
005880  000483                          gotoCurrentForm(0);
005881  000484                      break;
005882  000485        
005883  000486        
005884  000487                     case inextBtn_enableCell:
005885  000488        
005886  000489        
005887  000490                      break;
005888  000491        
005889  000492                      case imenuBtn_enableCell:
005890  000493                          btnPressAndRelease(imenuBtn_enableCell);
005891  000494                          previousLink := FORM_6_ENABLE_CELL;
005892  000495                         currentForm := FORM_21_UTILITIES;
005893  000496                         gotoCurrentForm(0);
005894  000497                      break;
005895  000498                      endswitch
005896  000499                  break;
005897  000500        
005898  000501                  case FORM_7_CURRENT_PIN:  //Use or Create Pin Form
005899  000502        
005900  000503                      img_Show(hndl, icurrentPinDigits_00);  // show all digits at 0, only do this once
005901  000504                      ledDigitsDisplay(cellPin[0], icurrentPinDigits_00+1, 112, 1, 1, 50, 0) ;
005902  000505                      img_Show(hndl, icurrentPinDigits_01);  // show all digits at 0, only do this once
005903  000506                      ledDigitsDisplay(cellPin[1], icurrentPinDigits_01+1, 164, 1, 1, 50, 0) ;
005904  000507                      img_Show(hndl, icurrentPinDigits_02);  // show all digits at 0, only do this once
005905  000508                      ledDigitsDisplay(cellPin[2], icurrentPinDigits_02+1, 216, 1, 1, 50, 0) ;
005906  000509                      img_Show(hndl, icurrentPinDigits_03);  // show all digits at 0, only do this once
005907  000510                      ledDigitsDisplay(cellPin[3], icurrentPinDigits_03+1, 264, 1, 1, 50, 0) ;
005908  000511                      img_Show(hndl, icurrentPinDigits_04);  // show all digits at 0, only do this once
005909  000512                      ledDigitsDisplay(cellPin[4], icurrentPinDigits_04+1, 312, 1, 1, 50, 0) ;
005910  000513        
005911  000514                      //  btnPressReset(iusePinBtn_currentPin);
005912  000515                      switch(touchImgIndex)
005913  000516                       case iusePinBtn_currentPin:
005914  000517                          switchBtnPress(iusePinBtn_currentPin, icreatePinBtn_currentPin);
005915  000518                          cellPinValid := checkCellPin();
005916  000519                          if (cellPinValid == TRUE)
005917  000520                              currentForm := FORM_10_START_TREATMENT;
005918  000521                              btnPressReset(iusePinBtn_currentPin);
005919  000522                              gotoCurrentForm(0);
005920  000523                           else if (cellPinValid == FALSE && cellSignalStrength == FALSE)
005921  000524                              currentForm :=  FORM_23_UNABLE_TO_CONNECT_NETWORK;
005922  000525                              btnPressReset(iusePinBtn_currentPin);
005923  000526                              gotoCurrentForm(0);
005924  000527                          else if (cellPinValid == FALSE && cellSignalStrength > 0)
005925  000528                              currentForm := FORM_14_INVALID_PIN;
005926  000529                              btnPressReset(iusePinBtn_currentPin);
005927  000530                              gotoCurrentForm(0);
005928  000531                          else if (cellPinValid == CELL_TIMED_OUT)
005929  000532                              currentForm :=  FORM_23_UNABLE_TO_CONNECT_NETWORK;
005930  000533                              btnPressReset(iusePinBtn_currentPin);
005931  000534                              gotoCurrentForm(0);
005932  000535                          else
005933  000536                              currentForm :=  FORM_23_UNABLE_TO_CONNECT_NETWORK;
005934  000537                              btnPressReset(iusePinBtn_currentPin);
005935  000538                              gotoCurrentForm(0);
005936  000539        
005937  000540                          endif
005938  000541        
005939  000542                      break;
005940  000543        
005941  000544                  case icreatePinBtn_currentPin:
005942  000545                          switchBtnPress(icreatePinBtn_currentPin, iusePinBtn_currentPin);
005943  000546        
005944  000547                          if (cellSignalStrength >0)
005945  000548                                //  print(cellPin[PIN_LENGTH]);
005946  000549                               //   print("\nCell Strength " , cellSignalStrength);
005947  000550                              setForm := FORM_8_MODIFY_PIN;
005948  000551                              btnPressReset(icreatePinBtn_currentPin);
005949  000552                               //currentForm := 8;
005950  000553                              //gotoCurrentForm(0);
005951  000554                          else if(cellSignalStrength < 1)
005952  000555                                 // print("\nCell Strength" , cellSignalStrength);
005953  000556                              setForm := FORM_23_UNABLE_TO_CONNECT_NETWORK; ///unable to get cell signal, Try again?
005954  000557                              btnPressReset(icreatePinBtn_currentPin);
005955  000558                          endif
005956  000559        
005957  000560                      if(setForm == FORM_8_MODIFY_PIN)
005958  000561        
005959  000562                          cellPin[PIN_LENGTH -1] := [0];
005960  000563                          clearPin();
005961  000564                      endif
005962  000565                      btnPressReset(iusePinBtn_currentPin);
005963  000566                      currentForm := setForm;
005964  000567                      gotoCurrentForm(0);
005965  000568                     break;
005966  000569        
005967  000570                  /////////// MENU  /////////
005968  000571                      case inextBtn_currentPin:
005969  000578                          gotoCurrentForm(0);   */
005970  000579                     break;
005971  000580        
005972  000581                      case imenuBtn_currentPin:
005973  000582                      break;
005974  000583        
005975  000584                          case ibackBtn_currentPin:
005976  000585                             btnPressAndRelease(ibackBtn_currentPin);
005977  000586                             currentForm :=  backBtn(FORM_7_CURRENT_PIN);
005978  000587                              gotoCurrentForm(0);
005979  000588                         break;
005980  000589                     endswitch
005981  000590                  break;
005982  000591        
005983  000592                  case FORM_8_MODIFY_PIN:  //Create Pin Form
005984  000593                      if(cellPin[PIN_LENGTH -1]<=4)
005985  000594                          if (touchImgIndex < 0 || BtnNumber(touchImgIndex) < 0)    //created to keep pin from adding blanks '0's when anything other than the pin buttons are pushed
005986  000595        
005987  000596                          else if( touchImgIndex >= 0) //creates pin
005988  000597                              tempBtnHighlight(touchImgIndex);
005989  000598                              cellPin[cellPin[PIN_LENGTH -1]] := BtnNumber(touchImgIndex);
005990  000599                              cellPin[PIN_LENGTH -1]++;
005991  000600                          endif
005992  000601                              ledDigitsDisplay(cellPin[0], isetPinDigits_00+1, 98, 1, 1, 54, 0) ;
005993  000602                              ledDigitsDisplay(cellPin[1], isetPinDigits_01+1, 150, 1, 1, 54, 0) ;
005994  000603                              ledDigitsDisplay(cellPin[2], isetPinDigits_02+1, 202, 1, 1, 54, 0) ;
005995  000604                              ledDigitsDisplay(cellPin[3], isetPinDigits_03+1, 254, 1, 1, 54, 0) ;
005996  000605                              ledDigitsDisplay(cellPin[4], isetPinDigits_04+1, 306, 1, 1, 54, 0) ;
005997  000606                      endif
005998  000607                     /////clear pin///////
005999  000608                      switch(touchImgIndex)
006000  000609                      case iclearBtn:
006001  000610                         tempBtnHighlight(touchImgIndex);
006002  000611                         cellPin[PIN_LENGTH -1] := [0];
006003  000612                         clearPin();
006004  000613        
006005  000614                          ledDigitsDisplay(cellPin[0], isetPinDigits_00+1, 98, 1, 1, 54, 0) ;
006006  000615                          ledDigitsDisplay(cellPin[1], isetPinDigits_01+1, 150, 1, 1, 54, 0) ;
006007  000616                          ledDigitsDisplay(cellPin[2], isetPinDigits_02+1, 202, 1, 1, 54, 0) ;
006008  000617                          ledDigitsDisplay(cellPin[3], isetPinDigits_03+1, 254, 1, 1, 54, 0) ;
006009  000618                          ledDigitsDisplay(cellPin[4], isetPinDigits_04+1, 306, 1, 1, 54, 0) ;
006010  000619                      break;
006011  000620                     /////////// MENU  /////////
006012  000621                      case inextBtn_settPin:
006013  000622                          btnPressAndRelease(inextBtn_settPin);
006014  000623                         btnPressReset(icreatePinBtn_currentPin);
006015  000624                         currentForm := FORM_7_CURRENT_PIN;
006016  000625                         gotoCurrentForm(0);
006017  000626                      break;
006018  000627        
006019  000628                      case ibackBtn_settPin:
006020  000629                         btnPressAndRelease(ibackBtn_settPin);
006021  000630                         currentForm := FORM_7_CURRENT_PIN;
006022  000631                         gotoCurrentForm (0);
006023  000632                         btnPressReset(icreatePinBtn_currentPin);
006024  000633                      break;
006025  000634        
006026  000635                     case imenuBtn_settPin:
006027  000636                      break;
006028  000637                      endswitch
006029  000638                  break;
006030  000639        
006031  000640                  case FORM_9_UNABLE_TO_CONNECT_MODEM: //Unable to connect to Cell form
006032  000641                       switch(touchImgIndex)
006033  000642                       case inoCellBtn_ModemCommunicationError:
006034  000643                           cellMonitoring:=FALSE;
006035  000644                           currentForm := FORM_2_WELCOME_SCREEN;
006036  000645                           gotoCurrentForm(0);
006037  000646                       break;
006038  000647                       endswitch
006039  000648                  break;
006040  000649        
006041  000650                  case FORM_23_UNABLE_TO_CONNECT_NETWORK: //Unable to connect to Cell form
006042  000651                       switch(touchImgIndex)
006043  000652                       case inoCellBtn_NetworkCommunicationError:
006044  000653                          btnPressAndRelease(inoCellBtn_NetworkCommunicationError);
006045  000654                           cellMonitoring:=FALSE;
006046  000655                           conectionHasHappened := FALSE;
006047  000656                           currentForm := FORM_10_START_TREATMENT;
006048  000657                           gotoCurrentForm(0);
006049  000658                      break;
006050  000659                        case iretryConnectionBtn:
006051  000660                              btnPressAndRelease(iretryConnectionBtn);
006052  000661                                  img_Show(hndl,iLoadingBG) ;  //place holder image while attempting to get cell strength
006053  000662                                  img_Show(hndl,iLoadingText) ;
006054  000663                              if(request_Cell_Strength_Exist() == TRUE)
006055  000664                                // print("cell request True");
006056  000665                                // pause(500);
006057  000666                                  cellMonitoring:=FALSE;
006058  000667                                  conectionHasHappened := TRUE;
006059  000668                                  currentForm := FORM_6_ENABLE_CELL;
006060  000669                                  gotoCurrentForm(0);
006061  000670                              else
006062  000671                                //  print("cell request FALSE");
006063  000672                                //  pause (500);
006064  000673                                  cellMonitoring:=FALSE;
006065  000674                                  conectionHasHappened := TRUE;
006066  000675                                  currentForm := FORM_23_UNABLE_TO_CONNECT_NETWORK;
006067  000676                                  gotoCurrentForm(0);
006068  000677                              endif
006069  000678                          break;
006070  000679                          endswitch
006071  000680                  break;
006072  000681        
006073  000682                  case FORM_10_START_TREATMENT: //Start Treatment Form
006074  000683                   switch(touchImgIndex)
006075  000684                     case istartBtn_startTreatment:
006076  000685                      if(nCircuits == FALSE)
006077  000686                           selectBtn(icircuitsSelectText, 3);  //takes you to the "please select 'option' form"
006078  000687                      else if(cBreakers == FALSE)
006079  000688                             selectBtn(iampSelectText, 4); //takes you to the "please select 'option' form"
006080  000689                       else
006081  000690                          runCurrentUpdate := TRUE;
006082  000691                          btnPress(istartBtn_startTreatment);
006083  000692                          begin_Treatment();
006084  000693                          setForm := FORM_11_CURRENT_RESULTS;
006085  000694                          endif
006086  000695                      break;
006087  000696                  /////////// MENU  /////////
006088  000697                      case inextBtn_startTreatment:
006089  000698        
006090  000699                      break;
006091  000700        
006092  000701                     case ibackBtn_startTreatment:
006093  000702                          btnPressAndRelease(ibackBtn_startTreatment);
006094  000703                          if (cellMonitoring == FALSE)
006095  000704                           if(cellOnBoard == TRUE)
006096  000705                              currentForm := FORM_6_ENABLE_CELL;
006097  000706                              gotoCurrentForm(0);
006098  000707                           else
006099  000708                              currentForm := FORM_5_TEMP_SETTINGS;
006100  000709                              gotoCurrentForm(0);
006101  000710                          endif
006102  000711                          else if(cellMonitoring == TRUE)
006103  000712                             if(cellOnBoard == TRUE)
006104  000713                              currentForm := FORM_7_CURRENT_PIN;
006105  000714                              gotoCurrentForm(0);
006106  000715                           else
006107  000716                              currentForm := FORM_5_TEMP_SETTINGS;
006108  000717                              gotoCurrentForm(0);
006109  000718                          endif
006110  000719                      endif
006111  000720                     break;
006112  000721        
006113  000722                      case imenuBtn_startTreatment:
006114  000723        
006115  000724                      break;
006116  000725                     endswitch
006117  000726                  break;
006118  000727        
006119  000728                  case FORM_11_CURRENT_RESULTS:  //Current Results Form
006120  000729                      runCurrentUpdate := TRUE;
006121  000730                      displayCurrentTemp();
006122  000731        
006123  000732                   /////////// MENU  /////////
006124  000733                      switch(touchImgIndex)
006125  000734                      case imenuBtn_currentResults:
006126  000735                          btnPressAndRelease(imenuBtn_currentResults);
006127  000736                         runCurrentUpdate := FALSE;
006128  000737                          previousLink := FORM_11_CURRENT_RESULTS;
006129  000738                         currentForm := FORM_21_UTILITIES;
006130  000739                          gotoCurrentForm(0);
006131  000740                        // updateUtilitesScreen();
006132  000741                      break;
006133  000742        
006134  000743                       case istopBtn_currentResults:
006135  000744                        btnPressAndRelease(istopBtn_currentResults);
006136  000745                         runCurrentUpdate := FALSE;
006137  000746                         currentForm := FORM_15_STOP_TREATMENT;
006138  000747                         gotoCurrentForm(0);
006139  000748                      break;
006140  000749                      endswitch
006141  000750                  break;
006142  000751        
006143  000752                  case FORM_13_SELECTION_REMINDER:
006144  000753                      img_Show(hndl,iForm13);
006145  000754                  break;
006146  000755        
006147  000756                  case FORM_14_INVALID_PIN:
006148  000757                       cellMonitoring := TRUE;
006149  000758                       switch(touchImgIndex)
006150  000759                      case iyesBtn_InvalidPin:
006151  000760                         switchBtnPress(iyesBtn_InvalidPin, inoBtn_InvalidPin);
006152  000761                         currentForm := FORM_7_CURRENT_PIN;
006153  000762                          btnPressReset(iyesBtn_InvalidPin);
006154  000763                         gotoCurrentForm(0);
006155  000764                      break;
006156  000765                      case inoBtn_InvalidPin:
006157  000766                         switchBtnPress(inoBtn_InvalidPin, iyesBtn_InvalidPin);
006158  000767                          cellMonitoring := FALSE;
006159  000768                         currentForm := FORM_10_START_TREATMENT;
006160  000769                         btnPressReset(inoBtn_InvalidPin);
006161  000770                         gotoCurrentForm(0);
006162  000771                           //   print(setForm);
006163  000772                      break;
006164  000773                      endswitch
006165  000774                  break;
006166  000775        
006167  000776                  case FORM_15_STOP_TREATMENT:  ///////////////// Shut Off Page
006168  000777                  switch(touchImgIndex)
006169  000778                      case iyesBtn_stopTreatment:
006170  000779                          btnPressAndRelease(iyesBtn_stopTreatment);
006171  000780                          normalStop();
006172  000781                      break;
006173  000782                      case inoBtn_stopTreatment:
006174  000783                          btnPressAndRelease(inoBtn_stopTreatment);
006175  000784                          currentForm := FORM_11_CURRENT_RESULTS;
006176  000785                          gotoCurrentForm(0);
006177  000786                          displayCurrentTemp();
006178  000787                          runCurrentUpdate := TRUE;
006179  000788                      break;
006180  000789                      endswitch
006181  000790                  break;
006182  000791        
006183  000792                  case FORM_17_TREATMENT_SUCCESSFUL:
006184  000793                      if (touchImgIndex == iviewResultsBtn)
006185  000794                          currentForm := FORM_18_TREATMENT_RESULTS;
006186  000795                          gotoCurrentForm(0);
006187  000796                      endif
006188  000797                  break;
006189  000798                   case FORM_18_TREATMENT_RESULTS:
006190  000799                   break;
006191  000800        
006192  000801                   case FORM_19_COUNTDOWN_TO_SHUT_OFF:
006193  000802                           if (touchImgIndex == iEmergencyShutOff_btn)
006194  000803                              emergencyStop();
006195  000804                           endif
006196  000805                   break;
006197  000806                         case FORM_21_UTILITIES:
006198  000807        
006199  000808                      if (touchImgIndex == iback_btn_utilites)
006200  000809                          btnPressAndRelease(iback_btn_utilites);
006201  000810                          if(previousLink == FORM_11_CURRENT_RESULTS)
006202  000811                          currentForm := FORM_11_CURRENT_RESULTS;
006203  000812                          gotoCurrentForm(0);
006204  000813                          displayCurrentTemp();
006205  000814                          else
006206  000815                          currentForm := PrevFormErrorIdenification;
006207  000816                          gotoCurrentForm(0);
006208  000817                          endif
006209  000818                    else if(touchImgIndex == iLogButton)
006210  000819                          btnPressAndRelease(iLogButton);
006211  000820                          currentForm := FORM_27_SEND_LOG_FILES;
006212  000821                          gotoCurrentForm(0);
006213  000822                     else if(touchImgIndex == inext_btn_utilities)
006214  000823                          btnPressAndRelease(inext_btn_utilities);
006215  000824                          currentForm := FORM_26_REIDENTIFY_PROBES;
006216  000825                          gotoCurrentForm(0);
006217  000826                       endif
006218  000827        
006219  000828                    break;
006220  000829        
006221  000830                       case FORM_24_IDENTIFYING_PROBES:
006222  000831                       if (touchImgIndex == iStartProbeIdent_btn)
006223  000832                          btnPressAndRelease(iStartProbeIdent_btn);
006224  000833                          start_Probe_Intiation();
006225  000834                         endif
006226  000835                    break;
006227  000836                     case FORM_25_PROBE_IDENTIFICATION_COMPLETE:
006228  000837                         if (touchImgIndex == iretryProbeConnect_btn)
006229  000838                          btnPressAndRelease(iretryProbeConnect_btn);
006230  000839                          start_Probe_Intiation();
006231  000840                          endif
006232  000841                       break;
006233  000842                     case FORM_26_REIDENTIFY_PROBES:
006234  000843                         if (touchImgIndex == ireidentifyProbesYes_btn)
006235  000844                          btnPressAndRelease(ireidentifyProbesYes_btn);
006236  000845                          start_Probe_Reintiation();
006237  000846                          else if(touchImgIndex == ireidentifyProbesNo_btn)
006238  000847                          btnPressAndRelease(ireidentifyProbesNo_btn);
006239  000848                          currentForm := FORM_21_UTILITIES;
006240  000849                          gotoCurrentForm(0);
006241  000850                          endif
006242  000851                      break;
006243  000852                      case FORM_27_SEND_LOG_FILES:
006244  000853                           if (touchImgIndex == iLog_Yes_Btn)
006245  000854                          btnPressAndRelease(iLog_Yes_Btn);
006246  000855                          if(cellSignalStrength >0)
006247  000856                          send_log_files();
006248  000857                          else
006249  000858                            currentForm := FORM_28_NO_CELL_DURING_TREATMENT;
006250  000859                            gotoCurrentForm(0);
006251  000860                          endif
006252  000861                          else if(touchImgIndex == iLog_No_btn)
006253  000862                          btnPressAndRelease(iLog_No_btn);
006254  000863                          currentForm := FORM_21_UTILITIES;
006255  000864                          gotoCurrentForm(0);
006256  000865                          endif
006257  000866                      break;
006258  000867        
006259  000868              endswitch
006260  000869          endif
006261  000870      endif
006262  000871  endfunc
006263  000872        
006264  000873        
006265  000874        
006266  000875        
006267  000876  ////////////////////////////////////////////////////////////////// FUNCTIONS  /////////////////////////////////////////////////////////////////////////
006268  000877        
006269  000878  //********** Global Functions **************
006270  000879        
006271  000880        
006272  000881  //**********Alows buttons and images to be clicked ******************
006273  000882        
006274  000883  func getImgIndex()
006275  000885      are not buttons. Returns image index if touch detected or -1 of images not touched */
006276  000886      var index;
006277  000887        
006278  000888      switch (currentForm)
006279  000889        
006280  000890    //******* Form 2 "yes" button Welcome *********//
006281  000891          case FORM_2_WELCOME_SCREEN:
006282  000892              index := img_Touched(hndl, iyesBtn_welcome);
006283  000893              if (index > 0) return index;
006284  000894          break;
006285  000895    //******* Form 3 Circuits *********//
006286  000896          case FORM_3_CIRCUITS:
006287  000897              index := img_Touched(hndl, i3circuitsBtn);
006288  000898              if (index > 0) return index;
006289  000899              index := img_Touched(hndl, i2circuitsBtn);
006290  000900              if (index > 0) return index;
006291  000901              index := img_Touched(hndl, inextBtn_circuits);
006292  000902              if (index > 0) return index;
006293  000903              index := img_Touched(hndl, imenuBtn_circuits);
006294  000904              if (index > 0) return index;
006295  000905          break;
006296  000906    //******* Form 4 Amps *********//
006297  000907          case FORM_4_BREAKERS:
006298  000908              index := img_Touched(hndl, i15ampsBtn);
006299  000909              if (index > 0) return index;
006300  000910              index := img_Touched(hndl, i20ampsBtn);
006301  000911              if (index > 0) return index;
006302  000912              index := img_Touched(hndl, inextBtn_amps);
006303  000913              if (index > 0) return index;
006304  000914              index := img_Touched(hndl, ibackBtn_amps);
006305  000915              if (index > 0) return index;
006306  000916              index := img_Touched(hndl, imenuBtn_amps);
006307  000917              if (index > 0) return index;
006308  000918          break;
006309  000919    //******* Form 5 Temp Set *********//
006310  000920          case FORM_5_TEMP_SETTINGS:
006311  000921              index := img_Touched(hndl, iaddBtn_targetTemp_tempSet);
006312  000922              if (index > 0) return index;
006313  000923              index := img_Touched(hndl, iminusBtn_targetTemp_tempSet);
006314  000924              if (index > 0) return index;
006315  000925              index := img_Touched(hndl, iaddBtn_maxAirTemp_tempSet);
006316  000926              if (index > 0) return index;
006317  000927              index := img_Touched(hndl, iminusBtn_maxAirTemp_tempSet);
006318  000928              if (index > 0) return index;
006319  000929              index := img_Touched(hndl, iaddBtn_timeAtTarget_tempSet);
006320  000930              if (index > 0) return index;
006321  000931              index := img_Touched(hndl, iminusBtn_timeAtTarget_tempSet);
006322  000932              if (index > 0) return index;
006323  000933              index := img_Touched(hndl, ibackBtn__tempSet);
006324  000934              if (index > 0) return index;
006325  000935              index := img_Touched(hndl, inextBtn__tempSet);
006326  000936              if (index > 0) return index;
006327  000937              index := img_Touched(hndl, imenuBtn__tempSet);
006328  000938              if (index > 0) return index;
006329  000939        
006330  000940          break;
006331  000941  //******* Form 6 Enable Cell *********//
006332  000942          case FORM_6_ENABLE_CELL:
006333  000943              index := img_Touched(hndl, iyesBtn_enableCell);
006334  000944              if (index > 0) return index;
006335  000945              index := img_Touched(hndl, inoBtn_enableCell);
006336  000946              if (index > 0) return index;
006337  000947              index := img_Touched(hndl, inextBtn_enableCell);
006338  000948              if (index > 0) return index;
006339  000949              index := img_Touched(hndl, imenuBtn_enableCell);
006340  000950              if (index > 0) return index;
006341  000951              index := img_Touched(hndl, ibackBtn_enableCell);
006342  000952              if (index > 0) return index;
006343  000953          break;
006344  000954  //******* Form 7 Current Pin *********//
006345  000955          case FORM_7_CURRENT_PIN:
006346  000956              index := img_Touched(hndl, icreatePinBtn_currentPin);
006347  000957              if (index > 0) return index;
006348  000958              index := img_Touched(hndl, iusePinBtn_currentPin);
006349  000959              if (index > 0) return index;
006350  000960              index := img_Touched(hndl, ibackBtn_currentPin);
006351  000961              if (index > 0) return index;
006352  000962              index := img_Touched(hndl, imenuBtn_currentPin);
006353  000963              if (index > 0) return index;
006354  000964              index := img_Touched(hndl, inextBtn_currentPin);
006355  000965              if (index > 0) return index;
006356  000966          break;
006357  000967  //******* Form 8 Set Pin *********//
006358  000968          case FORM_8_MODIFY_PIN:
006359  000969              index := img_Touched(hndl, ipinBtn_0);
006360  000970              if (index > 0) return index;
006361  000971              index := img_Touched(hndl, ipinBtn_1);
006362  000972              if (index > 0) return index;
006363  000973              index := img_Touched(hndl, ipinBtn_2);
006364  000974              if (index > 0) return index;
006365  000975              index := img_Touched(hndl, ipinBtn_3);
006366  000976              if (index > 0) return index;
006367  000977              index := img_Touched(hndl, ipinBtn_4);
006368  000978              if (index > 0) return index;
006369  000979              index := img_Touched(hndl, ipinBtn_5);
006370  000980              if (index > 0) return index;
006371  000981              index := img_Touched(hndl, ipinBtn_6);
006372  000982              if (index > 0) return index;
006373  000983              index := img_Touched(hndl, ipinBtn_7);
006374  000984              if (index > 0) return index;
006375  000985              index := img_Touched(hndl, ipinBtn_8);
006376  000986              if (index > 0) return index;
006377  000987              index := img_Touched(hndl, ipinBtn_9);
006378  000988              if (index > 0) return index;
006379  000989              index := img_Touched(hndl, iclearBtn);
006380  000990              if (index > 0) return index;
006381  000991              index := img_Touched(hndl, ibackBtn_settPin);
006382  000992              if (index > 0) return index;
006383  000993              index := img_Touched(hndl, inextBtn_settPin);
006384  000994              if (index > 0) return index;
006385  000995              index := img_Touched(hndl, imenuBtn_settPin);
006386  000996              if (index > 0) return index;
006387  000997              index := img_Touched(hndl, isetPinDigits_00);
006388  000998              if (index > 0) return index;
006389  000999              index := img_Touched(hndl, isetPinDigits_01);
006390  001000              if (index > 0) return index;
006391  001001              index := img_Touched(hndl, isetPinDigits_02);
006392  001002              if (index > 0) return index;
006393  001003              index := img_Touched(hndl, isetPinDigits_03);
006394  001004              if (index > 0) return index;
006395  001005              index := img_Touched(hndl, isetPinDigits_04);
006396  001006              if (index > 0) return index;
006397  001007            break;
006398  001008  //******* Form 9 unable to connect *********//
006399  001009           case FORM_9_UNABLE_TO_CONNECT_MODEM:
006400  001010              index := img_Touched(hndl, inoCellBtn_ModemCommunicationError);
006401  001011              if (index > 0) return index;
006402  001012           break;
006403  001013           case FORM_23_UNABLE_TO_CONNECT_NETWORK:
006404  001014               index := img_Touched(hndl, iretryConnectionBtn);
006405  001015              if (index > 0) return index;
006406  001016              index := img_Touched(hndl, inoCellBtn_NetworkCommunicationError);
006407  001017              if (index > 0) return index;
006408  001018           break;
006409  001019        
006410  001020        
006411  001021        
006412  001022  //******* Form 10 Start Treatment *********//
006413  001023           case FORM_10_START_TREATMENT:
006414  001024              index := img_Touched(hndl, istartBtn_startTreatment);
006415  001025              if (index > 0) return index;
006416  001026              index := img_Touched(hndl, inextBtn_startTreatment);
006417  001027              if (index > 0) return index;
006418  001028              index := img_Touched(hndl, imenuBtn_startTreatment);
006419  001029              if (index > 0) return index;
006420  001030              index := img_Touched(hndl, ibackBtn_startTreatment);
006421  001031              if (index > 0) return index;
006422  001032           break;
006423  001033  //******* Form 11 Current Resaults *********//
006424  001034           case FORM_11_CURRENT_RESULTS:
006425  001035              index := img_Touched(hndl, istopBtn_currentResults);
006426  001036              if (index > 0) return index;
006427  001037              index := img_Touched(hndl, inextBtn_currentResults);
006428  001038              if (index > 0) return index;
006429  001039              index := img_Touched(hndl, imenuBtn_currentResults);
006430  001040              if (index > 0) return index;
006431  001041              index := img_Touched(hndl, ibackBtn_currentResults);
006432  001042              if (index > 0) return index;
006433  001043          break;
006434  001044   //******* Form 12 Menu *********//
006435  001045          case FORM_12_MENU:
006436  001046              index := img_Touched(hndl, itempMenuBtn);
006437  001047              if (index > 0) return index;
006438  001048              index := img_Touched(hndl, ibreakerMenuBtn);
006439  001049              if (index > 0) return index;
006440  001050              index := img_Touched(hndl, icircuitMenuBtn);
006441  001051              if (index > 0) return index;
006442  001052              index := img_Touched(hndl, iutilitiesMenuBtn);
006443  001053              if (index > 0) return index;
006444  001054          break;
006445  001055  //******* Form 14 Invalid pin *********//
006446  001056          case FORM_14_INVALID_PIN:
006447  001057              index := img_Touched(hndl, iyesBtn_InvalidPin);
006448  001058              if (index > 0) return index;
006449  001059              index := img_Touched(hndl, inoBtn_InvalidPin);
006450  001060              if (index > 0) return index;
006451  001061           break;
006452  001062  //******* Form 15 stop treatment *********//
006453  001063          case FORM_15_STOP_TREATMENT:
006454  001064              index := img_Touched(hndl, iyesBtn_stopTreatment);
006455  001065              if (index > 0) return index;
006456  001066              index := img_Touched(hndl, inoBtn_stopTreatment);
006457  001067              if (index > 0) return index;
006458  001068          break;
006459  001069  //******* Form 17 Treatment Successful *********//
006460  001070          case FORM_17_TREATMENT_SUCCESSFUL:
006461  001071             index := img_Touched(hndl, iviewResultsBtn);
006462  001072              if (index > 0) return index;
006463  001073          break;
006464  001074        
006465  001075          case FORM_19_COUNTDOWN_TO_SHUT_OFF:
006466  001076             index := img_Touched(hndl, iEmergencyShutOff_btn);
006467  001077              if (index > 0) return index;
006468  001078          break;
006469  001079          case FORM_21_UTILITIES:
006470  001080           index := img_Touched(hndl, iback_btn_utilites);
006471  001081              if (index > 0) return index;
006472  001082              index := img_Touched(hndl, inext_btn_utilities);
006473  001083              if (index > 0) return index;
006474  001084              index := img_Touched(hndl, iLogButton);
006475  001085              if (index > 0) return index;
006476  001086               break;
006477  001087          case FORM_22_ESTABLISHING_CONNECTION:
006478  001088                  index := img_Touched(hndl, iContWithoutCell_btn);
006479  001089              if (index > 0) return index;
006480  001090               break;
006481  001091        
006482  001092         case FORM_24_IDENTIFYING_PROBES:
006483  001093               index := img_Touched(hndl, iStartProbeIdent_btn);
006484  001094              if (index > 0) return index;
006485  001095          break;
006486  001096          case FORM_25_PROBE_IDENTIFICATION_COMPLETE:
006487  001097              index := img_Touched(hndl, iretryProbeConnect_btn);
006488  001098              if (index > 0) return index;
006489  001099        
006490  001100          break;
006491  001101          case FORM_26_REIDENTIFY_PROBES:
006492  001102              index := img_Touched(hndl, ireidentifyProbesNo_btn);
006493  001103              if (index > 0) return index;
006494  001104              index := img_Touched(hndl, ireidentifyProbesYes_btn);
006495  001105              if (index > 0) return index;
006496  001106          break;
006497  001107          case FORM_27_SEND_LOG_FILES:
006498  001108              index := img_Touched(hndl,iLog_Yes_Btn);
006499  001109              if (index > 0) return index;
006500  001110              index := img_Touched(hndl,iLog_No_btn);
006501  001111              if (index > 0) return index;
006502  001112          break;
006503  001113        
006504  001114        
006505  001115      endswitch
006506  001116        
006507  001117      return -1;
006508  001118        
006509  001119  endfunc
006510  001120  ///////////////////////////////////////////////////////////////// Shows elements on each form when called///////////////////////////////////////
006511  001121  func gotoCurrentForm(var option)
006512  001122   /* This function handles form changes. When it is called, it clears the screen and loads the selected form.*/
006513  001123    //  if(option)
006514  001124    // endif
006515  001125    switch(currentForm)
006516  001126          case FORM_2_WELCOME_SCREEN:   //******* Form 2 welcome screen *********//
006517  001127              PrevFormErrorIdenification := FORM_2_WELCOME_SCREEN;
006518  001128              img_Show(hndl,iForm2) ;
006519  001129              //text
006520  001130              img_Show(hndl,iwelcome_header) ;
006521  001131              img_Show(hndl,iwelcome_subHead) ;
006522  001132              //yes button
006523  001133              img_ClearAttributes(hndl, iyesBtn_welcome, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006524  001134              img_Show(hndl, iyesBtn_welcome);  // show button, only do this once
006525  001135              img_SetWord(hndl, iyesBtn_welcome, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006526  001136          break;
006527  001137        
006528  001138          case FORM_3_CIRCUITS:   //******* Form 3 Circuits *********//
006529  001139              PrevFormErrorIdenification := FORM_3_CIRCUITS;
006530  001140              img_Show(hndl,iForm3) ;
006531  001141        
006532  001142              gfx_OutlineColour(WHITE) ;
006533  001143              gfx_LinePattern(LPFINE) ;
006534  001144              gfx_RectangleFilled(0, 0, 479, 23, 0xD6BB) ;
006535  001145              gfx_OutlineColour(BLACK) ;
006536  001146              gfx_LinePattern(LPSOLID) ;
006537  001147        
006538  001148              img_Show(hndl,ititleCircuits) ;
006539  001149              img_Show(hndl,icircuitsTexts) ;
006540  001150        
006541  001151           ///////bottom main menu
006542  001152        
006543  001153              img_ClearAttributes(hndl, iblank01, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006544  001154              img_Show(hndl, iblank01);  // show button, only do this once
006545  001155              img_SetWord(hndl, iblank01, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006546  001156        
006547  001157        
006548  001158              // menuBtn_circuits 1.0 generated 11/8/2016 2:55:36 PM
006549  001159              img_ClearAttributes(hndl, imenuBtn_circuits, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006550  001160              img_Show(hndl, imenuBtn_circuits);  // show button, only do this once
006551  001161              img_SetWord(hndl, imenuBtn_circuits, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006552  001162              img_Show(hndl,imenuBtn_circuits) ;
006553  001163        
006554  001164              img_ClearAttributes(hndl, iblank02, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006555  001165              img_Show(hndl, iblank02);  // show button, only do this once
006556  001166              img_SetWord(hndl, iblank02, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006557  001167        
006558  001168              img_ClearAttributes(hndl, inextBtn_circuits, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006559  001169              img_Show(hndl, inextBtn_circuits);  // show button, only do this once
006560  001170              img_SetWord(hndl, inextBtn_circuits, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006561  001171        
006562  001172           ///// 2 Circuit button
006563  001173              img_ClearAttributes(hndl, i2circuitsBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006564  001174              img_Show(hndl, i2circuitsBtn);  // show button, only do this once
006565  001175        
006566  001176           ////// 3 Circuit button
006567  001177              img_ClearAttributes(hndl, i3circuitsBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006568  001178              img_Show(hndl, i3circuitsBtn);  // show button, only do this once
006569  001179          break;
006570  001180        
006571  001181          case FORM_4_BREAKERS:   //******* Form 4 amps *********//
006572  001182               PrevFormErrorIdenification := FORM_4_BREAKERS;
006573  001183              img_Show(hndl,iForm4) ;
006574  001184        
006575  001185              gfx_OutlineColour(WHITE) ;
006576  001186              gfx_LinePattern(LPFINE) ;
006577  001187              gfx_RectangleFilled(0, 3, 479, 26, 0xD6BB) ;
006578  001188              gfx_OutlineColour(BLACK) ;
006579  001189              gfx_LinePattern(LPSOLID) ;
006580  001190        
006581  001191              img_Show(hndl,ititleBreakers) ;
006582  001192          ///////text
006583  001193             img_Show(hndl,iAmpsTexts) ;
006584  001194        
006585  001195          ////// Bottom Main menu
006586  001196             img_ClearAttributes(hndl, ibackBtn_amps, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006587  001197             img_Show(hndl, ibackBtn_amps);  // show button, only do this once
006588  001198             img_SetWord(hndl, ibackBtn_amps, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006589  001199        
006590  001200              // menuBtn_amps 1.0 generated 11/8/2016 6:25:12 PM
006591  001201              img_ClearAttributes(hndl, imenuBtn_amps, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006592  001202              img_Show(hndl, imenuBtn_amps);  // show button, only do this once
006593  001203              img_SetWord(hndl, imenuBtn_amps, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006594  001204        
006595  001205        
006596  001206             img_ClearAttributes(hndl, iblank03, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006597  001207             img_Show(hndl, iblank03);  // show button, only do this once
006598  001208             img_SetWord(hndl, iblank03, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006599  001209        
006600  001210             img_ClearAttributes(hndl, inextBtn_amps, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006601  001211             img_Show(hndl, inextBtn_amps);  // show button, only do this once
006602  001212             img_SetWord(hndl, inextBtn_amps, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006603  001213        
006604  001214          ///////15 Amp Button ////
006605  001215             img_ClearAttributes(hndl, i15ampsBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006606  001216             img_Show(hndl, i15ampsBtn);  // show button, only do this once
006607  001217          //////20 Amp Button/////
006608  001218             img_ClearAttributes(hndl, i20ampsBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006609  001219             img_Show(hndl, i20ampsBtn);  // show button, only do this once
006610  001220         break;
006611  001221        
006612  001222         case FORM_5_TEMP_SETTINGS:  //******* Form 5 set temps *********//
006613  001223              PrevFormErrorIdenification := FORM_5_TEMP_SETTINGS;
006614  001224              img_Show(hndl,iForm5) ;
006615  001225        
006616  001226              img_Show(hndl,itimeAtTargerText_tempSet) ;
006617  001227              img_Show(hndl,imaxAirTempF_text_tempSet) ;
006618  001228              img_Show(hndl,iTargetTempF_text_tempSet) ;
006619  001229        
006620  001230              gfx_RectangleFilled(0, 0, 479, 23, 0xD6BB) ;
006621  001231              img_Show(hndl,itemperatureTitle) ;
006622  001232        
006623  001233      ////////Target Temp///////////////
006624  001234        
006625  001235              ///Text///
006626  001236              img_Show(hndl,itargetTempText_tempSet) ;
006627  001237          /////Target Air Temp  **Digits** //
006628  001238              img_Show(hndl, itargetTempDigits_tempSet);  // show all digits at 0, only do this once
006629  001239              ledDigitsDisplay(tTemp, itargetTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
006630  001240          //////Target Temp --Minus Button-- //
006631  001241              img_ClearAttributes(hndl, iminusBtn_targetTemp_tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006632  001242              img_Show(hndl, iminusBtn_targetTemp_tempSet);  // show button, only do this once
006633  001243              img_SetWord(hndl, iminusBtn_targetTemp_tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006634  001244          ////Target Temp ++Add Button++ //
006635  001245              img_ClearAttributes(hndl, iaddBtn_timeAtTarget_tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006636  001246              img_Show(hndl, iaddBtn_timeAtTarget_tempSet);  // show button, only do this once
006637  001247              img_SetWord(hndl, iaddBtn_timeAtTarget_tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006638  001248        
006639  001249       ////////Max Air Temp///////////////
006640  001250              ///Text///
006641  001251              img_Show(hndl,imaxAirTempText_tempSet) ;
006642  001252          /////Max Air Temp  **Digits** ///
006643  001253              img_Show(hndl, imaxAirTempDigits_tempSet);  // show all digits at 0, only do this once
006644  001254              ledDigitsDisplay(mAirTemp, imaxAirTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
006645  001255          /////Max Air Temp --Minus Button-- //
006646  001256              img_ClearAttributes(hndl, iminusBtn_maxAirTemp_tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006647  001257              img_Show(hndl, iminusBtn_maxAirTemp_tempSet);  // show button, only do this once
006648  001258              img_SetWord(hndl, iminusBtn_maxAirTemp_tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006649  001259          /////Max Air Temp ++Add Button++ //
006650  001260              img_ClearAttributes(hndl, iaddBtn_targetTemp_tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006651  001261              img_Show(hndl, iaddBtn_targetTemp_tempSet);  // show button, only do this once
006652  001262              img_SetWord(hndl, iaddBtn_targetTemp_tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006653  001263        
006654  001264      ////////Time at Target///////////////
006655  001265              ///Text///
006656  001266              img_Show(hndl,itimeAtTargetText_tempSet) ;
006657  001267        
006658  001268              img_Show(hndl, itimeAtTargetDigits_tempSet);  // show all digits at 0, only do this once
006659  001269              ledDigitsDisplay(tAtTarget, itimeAtTargetDigits_tempSet+1, 59, 3, 1, 33, 1) ;
006660  001270        
006661  001271          /////Time at Target --Minus Button-- //
006662  001272              img_ClearAttributes(hndl, iminusBtn_timeAtTarget_tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006663  001273              img_Show(hndl, iminusBtn_timeAtTarget_tempSet);  // show button, only do this once
006664  001274              img_SetWord(hndl, iminusBtn_timeAtTarget_tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006665  001275        
006666  001276          /////Time at Target ++Add Button++ //
006667  001277              img_ClearAttributes(hndl, iaddBtn_maxAirTemp_tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006668  001278              img_Show(hndl, iaddBtn_maxAirTemp_tempSet);  // show button, only do this once
006669  001279              img_SetWord(hndl, iaddBtn_maxAirTemp_tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006670  001280        
006671  001281       //////// Main Bottom Menu ///////////////
006672  001282              img_ClearAttributes(hndl, ibackBtn__tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006673  001283              img_Show(hndl, ibackBtn__tempSet);  // show button, only do this once
006674  001284              img_SetWord(hndl, ibackBtn__tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006675  001285        
006676  001286        
006677  001287              // menuBtn__tempSet 1.0 generated 11/8/2016 6:26:36 PM
006678  001288              img_ClearAttributes(hndl, imenuBtn__tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006679  001289              img_Show(hndl, imenuBtn__tempSet);  // show button, only do this once
006680  001290              img_SetWord(hndl, imenuBtn__tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006681  001291        
006682  001292        
006683  001293        
006684  001294              img_ClearAttributes(hndl, iblank04, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006685  001295              img_Show(hndl, iblank04);  // show button, only do this once
006686  001296              img_SetWord(hndl, iblank04, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006687  001297        
006688  001298              img_ClearAttributes(hndl, inextBtn__tempSet, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006689  001299              img_Show(hndl, inextBtn__tempSet);  // show button, only do this once
006690  001300              img_SetWord(hndl, inextBtn__tempSet, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006691  001301          break;
006692  001302        
006693  001303          case FORM_6_ENABLE_CELL: //******* Form 6 enable cell *********//
006694  001304              PrevFormErrorIdenification := FORM_6_ENABLE_CELL;
006695  001305              img_Show(hndl,iForm6) ;
006696  001306              img_Show(hndl,ienableCellText) ;
006697  001307        /////// Enable Cell "YES" button ///////
006698  001308                img_ClearAttributes(hndl, iyesBtn_enableCell, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006699  001309                img_Show(hndl, iyesBtn_enableCell);  // show button, only do this once
006700  001310        
006701  001311        /////// Enable Cell "NO" button ////////
006702  001312                img_ClearAttributes(hndl, inoBtn_enableCell, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006703  001313                img_Show(hndl, inoBtn_enableCell);  // show button, only do this once
006704  001314        
006705  001315        //////// Main Bottom Menu ///////////////
006706  001316        
006707  001317        
006708  001318                  // backBtn_enableCell 1.0 generated 6/13/2016 10:10:03 AM
006709  001319                  img_ClearAttributes(hndl, ibackBtn_enableCell, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006710  001320                  img_Show(hndl, ibackBtn_enableCell);  // show button, only do this once
006711  001321                  img_SetWord(hndl, ibackBtn_enableCell, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006712  001322                  img_Show(hndl,ibackBtn_enableCell) ;
006713  001323        
006714  001324                img_ClearAttributes(hndl, imenuBtn_enableCell, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006715  001325                img_Show(hndl, imenuBtn_enableCell);  // show button, only do this once
006716  001326                img_SetWord(hndl, imenuBtn_enableCell, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006717  001327        
006718  001328                img_ClearAttributes(hndl, iblank05, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006719  001329                img_Show(hndl, iblank05);  // show button, only do this once
006720  001330                img_SetWord(hndl, iblank05, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006721  001331        
006722  001332                img_ClearAttributes(hndl, inextBtn_enableCell, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006723  001333                img_Show(hndl, inextBtn_enableCell);  // show button, only do this once
006724  001334                img_SetWord(hndl, inextBtn_enableCell, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006725  001335          break;
006726  001336        
006727  001337          case FORM_7_CURRENT_PIN:
006728  001338               PrevFormErrorIdenification := FORM_7_CURRENT_PIN;
006729  001339                img_Show(hndl,iForm7) ;
006730  001340        ///////Modify Pin Button/////////
006731  001341                img_ClearAttributes(hndl, icreatePinBtn_currentPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006732  001342                img_Show(hndl, icreatePinBtn_currentPin);  // show button, only do this once
006733  001343        ////// Use Pin Button /////////
006734  001344                img_ClearAttributes(hndl, iusePinBtn_currentPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006735  001345                img_Show(hndl, iusePinBtn_currentPin);  // show button, only do this once
006736  001346        //////// Main Bottom Menu ///////////////
006737  001347                img_ClearAttributes(hndl, ibackBtn_currentPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006738  001348                img_Show(hndl, ibackBtn_currentPin);  // show button, only do this once
006739  001349                img_SetWord(hndl, ibackBtn_currentPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006740  001350        
006741  001351                img_ClearAttributes(hndl, imenuBtn_currentPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006742  001352                img_Show(hndl, imenuBtn_currentPin);  // show button, only do this once
006743  001353                img_SetWord(hndl, imenuBtn_currentPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006744  001354        
006745  001355                img_ClearAttributes(hndl, iblank_06, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006746  001356                img_Show(hndl, iblank_06);  // show button, only do this once
006747  001357                img_SetWord(hndl, iblank_06, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006748  001358        
006749  001359                img_ClearAttributes(hndl, inextBtn_currentPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006750  001360                img_Show(hndl, inextBtn_currentPin);  // show button, only do this once
006751  001361                img_SetWord(hndl, inextBtn_currentPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006752  001362        //////// Cell Pin numbers ///////////////
006753  001363                img_Show(hndl, icurrentPinDigits_00);  // show all digits at 0, only do this once
006754  001364                ledDigitsDisplay(cellPin[0], icurrentPinDigits_00+1, 113, 1, 1, 50, 0) ;
006755  001365        
006756  001366                img_Show(hndl, icurrentPinDigits_01);  // show all digits at 0, only do this once
006757  001367                ledDigitsDisplay(cellPin[1], icurrentPinDigits_01+1, 165, 1, 1, 50, 0) ;
006758  001368        
006759  001369                img_Show(hndl, icurrentPinDigits_02);  // show all digits at 0, only do this once
006760  001370                ledDigitsDisplay(cellPin[2], icurrentPinDigits_02+1, 217, 1, 1, 50, 0) ;
006761  001371        
006762  001372                img_Show(hndl, icurrentPinDigits_03);  // show all digits at 0, only do this once
006763  001373                ledDigitsDisplay(cellPin[3], icurrentPinDigits_03+1, 265, 1, 1, 50, 0) ;
006764  001374        
006765  001375                img_Show(hndl, icurrentPinDigits_04);  // show all digits at 0, only do this once
006766  001376                ledDigitsDisplay(cellPin[4], icurrentPinDigits_04+1, 313, 1, 1, 50, 0) ;
006767  001377        
006768  001378             break;
006769  001379        
006770  001380             case FORM_8_MODIFY_PIN://******* Form 8 set pin *********//
006771  001381                  PrevFormErrorIdenification := FORM_8_MODIFY_PIN;
006772  001382                  img_Show(hndl,iForm8) ;
006773  001383         //////// pin buttons ///////////////
006774  001384                  img_ClearAttributes(hndl, ipinBtn_1, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006775  001385                  img_Show(hndl, ipinBtn_1);  // show button, only do this once
006776  001386                  img_SetWord(hndl, ipinBtn_1, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006777  001387        
006778  001388                  img_ClearAttributes(hndl, ipinBtn_2, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006779  001389                  img_Show(hndl, ipinBtn_2);  // show button, only do this once
006780  001390                  img_SetWord(hndl, ipinBtn_2, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006781  001391        
006782  001392                  img_ClearAttributes(hndl, ipinBtn_3, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006783  001393                  img_Show(hndl, ipinBtn_3);  // show button, only do this once
006784  001394                  img_SetWord(hndl, ipinBtn_3, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006785  001395        
006786  001396                  img_ClearAttributes(hndl, ipinBtn_4, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006787  001397                  img_Show(hndl, ipinBtn_4);  // show button, only do this once
006788  001398                  img_SetWord(hndl, ipinBtn_4, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006789  001399        
006790  001400                  img_ClearAttributes(hndl, ipinBtn_5, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006791  001401                  img_Show(hndl, ipinBtn_5);  // show button, only do this once
006792  001402                  img_SetWord(hndl, ipinBtn_5, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006793  001403        
006794  001404                  img_ClearAttributes(hndl, ipinBtn_6, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006795  001405                  img_Show(hndl, ipinBtn_6);  // show button, only do this once
006796  001406                  img_SetWord(hndl, ipinBtn_6, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006797  001407        
006798  001408                  img_ClearAttributes(hndl, ipinBtn_7, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006799  001409                  img_Show(hndl, ipinBtn_7);  // show button, only do this once
006800  001410                  img_SetWord(hndl, ipinBtn_7, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006801  001411        
006802  001412                  img_ClearAttributes(hndl, ipinBtn_8, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006803  001413                  img_Show(hndl, ipinBtn_8);  // show button, only do this once
006804  001414                  img_SetWord(hndl, ipinBtn_8, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006805  001415        
006806  001416                  img_ClearAttributes(hndl, ipinBtn_9, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006807  001417                  img_Show(hndl, ipinBtn_9);  // show button, only do this once
006808  001418                  img_SetWord(hndl, ipinBtn_9, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006809  001419        
006810  001420                  img_ClearAttributes(hndl, ipinBtn_0, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006811  001421                  img_Show(hndl, ipinBtn_0);  // show button, only do this once
006812  001422                  img_SetWord(hndl, ipinBtn_0, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006813  001423          //////// Clear button ///////////////
006814  001424                  img_ClearAttributes(hndl, iclearBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006815  001425                  img_Show(hndl, iclearBtn);  // show button, only do this once
006816  001426                  img_SetWord(hndl, iclearBtn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006817  001427          //////// Menu ///////////////
006818  001428                  img_ClearAttributes(hndl, ibackBtn_settPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006819  001429                  img_Show(hndl, ibackBtn_settPin);  // show button, only do this once
006820  001430                  img_SetWord(hndl, ibackBtn_settPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006821  001431        
006822  001432                  img_ClearAttributes(hndl, iblank_07, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006823  001433                  img_Show(hndl, iblank_07);  // show button, only do this once
006824  001434                  img_SetWord(hndl, iblank_07, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006825  001435        
006826  001436                  img_ClearAttributes(hndl, imenuBtn_settPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006827  001437                  img_Show(hndl, imenuBtn_settPin);  // show button, only do this once
006828  001438                  img_SetWord(hndl, imenuBtn_settPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006829  001439        
006830  001440                  img_ClearAttributes(hndl, inextBtn_settPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006831  001441                  img_Show(hndl, inextBtn_settPin);  // show button, only do this once
006832  001442                  img_SetWord(hndl, inextBtn_settPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006833  001443           //////// Display Pin ///////////////
006834  001444                  img_Show(hndl, isetPinDigits_00);  // show all digits at 0, only do this once
006835  001445                  ledDigitsDisplay(cellPin[0], isetPinDigits_00+1, 98, 1, 1, 54, 0) ;
006836  001446        
006837  001447                  img_Show(hndl, isetPinDigits_01);  // show all digits at 0, only do this once
006838  001448                  ledDigitsDisplay(cellPin[1], isetPinDigits_01+1, 150, 1, 1, 54, 0) ;
006839  001449        
006840  001450                  img_Show(hndl, isetPinDigits_02);  // show all digits at 0, only do this once
006841  001451                  ledDigitsDisplay(cellPin[2], isetPinDigits_02+1, 202, 1, 1, 54, 0) ;
006842  001452        
006843  001453                  img_Show(hndl, isetPinDigits_03);  // show all digits at 0, only do this once
006844  001454                  ledDigitsDisplay(cellPin[3], isetPinDigits_03+1, 254, 1, 1, 54, 0) ;
006845  001455        
006846  001456                  img_Show(hndl, isetPinDigits_04);  // show all digits at 0, only do this once
006847  001457                  ledDigitsDisplay(cellPin[4], isetPinDigits_04+1, 306, 1, 1, 54, 0) ;
006848  001458              break;
006849  001459        
006850  001460              case FORM_9_UNABLE_TO_CONNECT_MODEM://******* Form 9 unable to connect *********//
006851  001461                   PrevFormErrorIdenification := FORM_9_UNABLE_TO_CONNECT_MODEM;
006852  001462                  // Form9 1.1 generated 6/10/2016 1:32:49 PM
006853  001463                  img_Show(hndl,iForm9) ;
006854  001464        
006855  001465                  // noCellBtn_ModemCommunicationError 1.0 generated 6/10/2016 1:32:50 PM
006856  001466                  img_ClearAttributes(hndl, inoCellBtn_ModemCommunicationError, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006857  001467                  img_Show(hndl, inoCellBtn_ModemCommunicationError);  // show button, only do this once
006858  001468                  img_SetWord(hndl, inoCellBtn_ModemCommunicationError, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006859  001469                  img_Show(hndl,inoCellBtn_ModemCommunicationError) ;
006860  001470        
006861  001471                  // HeaderText_ModemCommincationError 1.0 generated 6/10/2016 1:32:50 PM
006862  001472                  img_Show(hndl,iHeaderText_ModemCommincationError) ;
006863  001473        
006864  001474                  // PleaseCyclePowerText 1.0 generated 6/10/2016 1:32:50 PM
006865  001475                  img_Show(hndl,iPleaseCyclePowerText) ;
006866  001476        
006867  001477        
006868  001478                  // contactZBText 1.0 generated 6/10/2016 1:32:50 PM
006869  001479                  img_Show(hndl,icontactZBText) ;
006870  001480        
006871  001481                  // modemContWithoutCellText 1.0 generated 6/10/2016 1:32:50 PM
006872  001482                  img_Show(hndl,imodemContWithoutCellText) ;
006873  001483        
006874  001484              break;
006875  001485              case FORM_23_UNABLE_TO_CONNECT_NETWORK:
006876  001486                   PrevFormErrorIdenification := FORM_23_UNABLE_TO_CONNECT_NETWORK;
006877  001487                  // Form23 1.1 generated 6/10/2016 2:04:25 PM
006878  001488                  img_Show(hndl,iForm23) ;
006879  001489        
006880  001490                  // NetworkConnectionError_header 1.0 generated 6/10/2016 2:04:25 PM
006881  001491                  img_Show(hndl,iNetworkConnectionError_header) ;
006882  001492        
006883  001493                  // poorSignalText 1.0 generated 6/10/2016 2:04:25 PM
006884  001494                  img_Show(hndl,ipoorSignalText) ;
006885  001495        
006886  001496                  // reconnectText 1.0 generated 6/10/2016 2:04:26 PM
006887  001497                  img_Show(hndl,ireconnectText) ;
006888  001498        
006889  001499        
006890  001500                  // noCellBtn_NetworkCommunicationError 1.0 generated 6/13/2016 9:17:51 AM
006891  001501                  img_ClearAttributes(hndl, inoCellBtn_NetworkCommunicationError, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006892  001502                  img_Show(hndl, inoCellBtn_NetworkCommunicationError);  // show button, only do this once
006893  001503                  img_SetWord(hndl, inoCellBtn_NetworkCommunicationError, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006894  001504                  img_Show(hndl,inoCellBtn_NetworkCommunicationError) ;
006895  001505        
006896  001506        
006897  001507                  // retryConnectionBtn 1.0 generated 6/13/2016 9:17:32 AM
006898  001508                  img_ClearAttributes(hndl, iretryConnectionBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006899  001509                  img_Show(hndl, iretryConnectionBtn);  // show button, only do this once
006900  001510                  img_SetWord(hndl, iretryConnectionBtn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006901  001511                  img_Show(hndl,iretryConnectionBtn) ;
006902  001512        
006903  001513        
006904  001514              break;
006905  001515               case FORM_10_START_TREATMENT://******* Form 10 start treatment *********//
006906  001516                  PrevFormErrorIdenification := FORM_10_START_TREATMENT;
006907  001517                  img_Show(hndl,iForm10) ;
006908  001518           ///////Start Treatment button////////
006909  001519                  img_ClearAttributes(hndl, istartBtn_startTreatment, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006910  001520                  img_Show(hndl, istartBtn_startTreatment);  // show button, only do this once
006911  001521                  img_SetWord(hndl, istartBtn_startTreatment, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006912  001522        
006913  001523                  img_Show(hndl,iStatictext1) ;
006914  001524          //////// Menu ///////////////
006915  001525                  img_ClearAttributes(hndl, ibackBtn_startTreatment, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006916  001526                  img_Show(hndl, ibackBtn_startTreatment);  // show button, only do this once
006917  001527                  img_SetWord(hndl, ibackBtn_startTreatment, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006918  001528        
006919  001529                  img_ClearAttributes(hndl, iblank12, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006920  001530                  img_Show(hndl, iblank12);  // show button, only do this once
006921  001531                  img_SetWord(hndl, iblank12, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006922  001532        
006923  001533                  img_ClearAttributes(hndl, imenuBtn_startTreatment, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006924  001534                  img_Show(hndl, imenuBtn_startTreatment);  // show button, only do this once
006925  001535                  img_SetWord(hndl, imenuBtn_startTreatment, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006926  001536        
006927  001537                  img_ClearAttributes(hndl, inextBtn_startTreatment, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006928  001538                  img_Show(hndl, inextBtn_startTreatment);  // show button, only do this once
006929  001539                  img_SetWord(hndl, inextBtn_startTreatment, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006930  001540              break;
006931  001541        
006932  001542              case FORM_11_CURRENT_RESULTS: //******* Form 11 current results *********//
006933  001543        
006934  001544                  gfx_Cls() ;
006935  001545                  img_Show(hndl,iForm11) ;
006936  001546        
006937  001547                  gfx_OutlineColour(WHITE) ;
006938  001548                  gfx_LinePattern(LPFINE) ;
006939  001549                  gfx_RectangleFilled(0, 0, 479, 23, 0xD6BB) ;
006940  001550                  gfx_OutlineColour(BLACK) ;
006941  001551                  gfx_LinePattern(LPSOLID) ;
006942  001552        
006943  001553                  img_Show(hndl,icurrentResultsTitle) ;
006944  001554       //////// "Probe" text ///////////////
006945  001555                  img_Show(hndl,iprobe1Text_currentResults) ;
006946  001556                  img_Show(hndl,iprobe2Text_currentResults) ;
006947  001557                  img_Show(hndl,iprobe3Text_currentResults) ;
006948  001558        
006949  001559        //////// "F" degrees text ///////////////
006950  001560                  img_Show(hndl,iprobe1F_text) ;
006951  001561                  img_Show(hndl,iprobe2F_text) ;
006952  001562                  img_Show(hndl,iprobe3F_text) ;
006953  001563                  img_Show(hndl,iMaxAirTempF_text) ;
006954  001564        //////// Elapse Time "hr" text ///////////////
006955  001565                  img_Show(hndl,ielapseTime_hr_text) ;
006956  001566        //////// Elapse Time "min" text ///////////////
006957  001567                  img_Show(hndl,ielapseTime_min_text) ;
006958  001568        //////// Temp text ///////////////
006959  001569                  img_Show(hndl,imaxAirTempText_currentResutls) ;
006960  001570                  img_Show(hndl,ielapseTimeText_currentResutls) ;
006961  001571                  img_Show(hndl,iestTimeRemaining_currentResults) ;
006962  001572         //////// Menu ///////////////
006963  001573                  img_ClearAttributes(hndl, ibackBtn_currentResults, I_TOUCH_DISABLE);
006964  001574                  img_Show(hndl, ibackBtn_currentResults);
006965  001575                  img_SetWord(hndl, ibackBtn_currentResults, IMAGE_INDEX, state);
006966  001576        
006967  001577                  img_ClearAttributes(hndl, imenuBtn_currentResults, I_TOUCH_DISABLE);
006968  001578                  img_Show(hndl, imenuBtn_currentResults);
006969  001579                  img_SetWord(hndl, imenuBtn_currentResults, IMAGE_INDEX, state);
006970  001580        
006971  001581                  img_ClearAttributes(hndl, istopBtn_currentResults, I_TOUCH_DISABLE);
006972  001582                  img_Show(hndl, istopBtn_currentResults);
006973  001583                  img_SetWord(hndl, istopBtn_currentResults, IMAGE_INDEX, state);
006974  001584                  img_ClearAttributes(hndl, inextBtn_currentResults, I_TOUCH_DISABLE);
006975  001585        
006976  001586                  img_Show(hndl, inextBtn_currentResults);
006977  001587                  img_SetWord(hndl, inextBtn_currentResults, IMAGE_INDEX, state);
006978  001588        //////// Digits  ///////////////
006979  001589                  img_Show(hndl, iprobe1_digits_currentResults);
006980  001590                  img_Show(hndl, iprobe2_digits_currentResults);
006981  001591                  img_Show(hndl, iprobe3_digits_currentResults);
006982  001592                  img_Show(hndl, imaxAirTemp_digits_currentResults);
006983  001593                  img_Show(hndl, ielapseTime_hours_digits_currentResults);
006984  001594                  img_Show(hndl, ielapseTime_mins_digits_currentResults);
006985  001595              break;
006986  001596        
006987  001597          case FORM_12_MENU://******* Form 12 Menu *********//
006988  001598              PrevFormErrorIdenification := FORM_12_MENU;
006989  001599              img_Show(hndl,iForm12) ;
006990  001600        
006991  001601              // utilitiesMenuBtn 1.0 generated 5/9/2016 1:45:35 PM
006992  001602              img_ClearAttributes(hndl, iutilitiesMenuBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006993  001603              img_Show(hndl, iutilitiesMenuBtn);  // show button, only do this once
006994  001604              img_SetWord(hndl, iutilitiesMenuBtn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
006995  001605              img_Show(hndl,iutilitiesMenuBtn) ;
006996  001606        
006997  001607              // tempMenuBtn 1.0 generated 5/9/2016 1:45:35 PM
006998  001608              img_ClearAttributes(hndl, itempMenuBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
006999  001609              img_Show(hndl, itempMenuBtn);  // show button, only do this once
007000  001610              img_SetWord(hndl, itempMenuBtn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007001  001611              img_Show(hndl,itempMenuBtn) ;
007002  001612        
007003  001613              // breakerMenuBtn 1.0 generated 5/9/2016 1:45:35 PM
007004  001614              img_ClearAttributes(hndl, ibreakerMenuBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007005  001615              img_Show(hndl, ibreakerMenuBtn);  // show button, only do this once
007006  001616              img_SetWord(hndl, ibreakerMenuBtn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007007  001617              img_Show(hndl,ibreakerMenuBtn) ;
007008  001618        
007009  001619              // circuitMenuBtn 1.0 generated 5/9/2016 1:45:35 PM
007010  001620              img_ClearAttributes(hndl, icircuitMenuBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007011  001621              img_Show(hndl, icircuitMenuBtn);  // show button, only do this once
007012  001622              img_SetWord(hndl, icircuitMenuBtn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007013  001623              img_Show(hndl,icircuitMenuBtn) ;
007014  001624        
007015  001625        
007016  001626          break;
007017  001627        
007018  001628          case FORM_13_SELECTION_REMINDER:  //******* Form 13 error page for amps and circuits *********//
007019  001629        
007020  001630              img_Show(hndl,iForm13) ;
007021  001631        
007022  001632          break;
007023  001633        
007024  001634          case FORM_14_INVALID_PIN: //******* Form 14 invaid pin *********//
007025  001635             PrevFormErrorIdenification := FORM_14_INVALID_PIN;
007026  001636            img_Show(hndl,iForm14) ;
007027  001637        
007028  001638            img_Show(hndl,iinvalidPinText_Header) ;
007029  001639        
007030  001640            img_Show(hndl,iinvalidPinText_body) ;
007031  001641            img_ClearAttributes(hndl, iyesBtn_InvalidPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007032  001642            img_Show(hndl, iyesBtn_InvalidPin);  // show button, only do this once
007033  001643            img_SetWord(hndl, iyesBtn_InvalidPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007034  001644            img_Show(hndl,iyesBtn_InvalidPin) ;
007035  001645        
007036  001646            img_ClearAttributes(hndl, inoBtn_InvalidPin, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007037  001647            img_Show(hndl, inoBtn_InvalidPin);  // show button, only do this once
007038  001648            img_SetWord(hndl, inoBtn_InvalidPin, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007039  001649            img_Show(hndl,inoBtn_InvalidPin) ;
007040  001650        
007041  001651        break;
007042  001652        
007043  001653        case FORM_15_STOP_TREATMENT: //******* Form 15 stop treatment *********//
007044  001654        
007045  001655              img_Show(hndl,iForm15) ;
007046  001656        
007047  001657              img_Show(hndl,istopTreatmentHeader) ;
007048  001658        
007049  001659              img_ClearAttributes(hndl, iyesBtn_stopTreatment, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007050  001660              img_Show(hndl, iyesBtn_stopTreatment);  // show button, only do this once
007051  001661              img_SetWord(hndl, iyesBtn_stopTreatment, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007052  001662              img_Show(hndl,iyesBtn_stopTreatment) ;
007053  001663        
007054  001664              img_ClearAttributes(hndl, inoBtn_stopTreatment, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007055  001665              img_Show(hndl, inoBtn_stopTreatment);  // show button, only do this once
007056  001666              img_SetWord(hndl, inoBtn_stopTreatment, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007057  001667              img_Show(hndl,inoBtn_stopTreatment) ;
007058  001668        break;
007059  001669        
007060  001670       case FORM_16_ERRORS: //******* Form 16 errors *********//
007061  001671        
007062  001672          img_Show(hndl,iForm16) ;
007063  001673        
007064  001674       break;
007065  001675        
007066  001676       case FORM_17_TREATMENT_SUCCESSFUL: //******* Form 17 treatment successful *********//
007067  001677        
007068  001678           img_Show(hndl,iForm17) ;
007069  001679        
007070  001680           img_ClearAttributes(hndl, iUserbutton5, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007071  001681           img_Show(hndl, iUserbutton5);  // show button, only do this once
007072  001682           img_SetWord(hndl, iUserbutton5, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007073  001683           img_Show(hndl,iUserbutton5) ;
007074  001684        
007075  001685           img_ClearAttributes(hndl, iviewResultsBtn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007076  001686           img_Show(hndl, iviewResultsBtn);  // show button, only do this once
007077  001687           img_SetWord(hndl, iviewResultsBtn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007078  001688           img_Show(hndl,iviewResultsBtn) ;
007079  001689        
007080  001690          img_Show(hndl,itreatmentSuccessfulHeader) ;
007081  001691        
007082  001692       break;
007083  001693        
007084  001694        case FORM_18_TREATMENT_RESULTS:  //******* Form 18 Treatment Result *********//
007085  001695            img_Show(hndl,iForm18) ;
007086  001696        
007087  001697            gfx_OutlineColour(WHITE) ;
007088  001698            gfx_LinePattern(LPFINE) ;
007089  001699            gfx_RectangleFilled(0, 0, 479, 23, 0xD6BB) ;
007090  001700            gfx_OutlineColour(BLACK) ;
007091  001701            gfx_LinePattern(LPSOLID) ;
007092  001702        
007093  001703            img_Show(hndl,itreamtmentResultsTitle) ;
007094  001704        //////// "probe" text ///////////////
007095  001705            img_Show(hndl,iprobe1Text_currentResults) ;
007096  001706            img_Show(hndl,iprobe2Text_currentResults) ;
007097  001707            img_Show(hndl,iprobe3Text_currentResults) ;
007098  001708      //////// "F" degrees text ///////////////
007099  001709            img_Show(hndl,iprobe1F_text) ;
007100  001710            img_Show(hndl,iprobe2F_text) ;
007101  001711            img_Show(hndl,iprobe3F_text) ;
007102  001712            img_Show(hndl,iMaxAirTempF_text) ;
007103  001713         //////// hr and min text ///////////////
007104  001714            img_Show(hndl,ielapseTime_hr_text) ;
007105  001715            img_Show(hndl,ielapseTime_min_text) ;
007106  001716        
007107  001717        
007108  001718           img_Show(hndl,imaxAirTempText_currentResutls) ;
007109  001719           img_Show(hndl,ielapseTimeText_currentResutls) ;
007110  001720        
007111  001721        
007112  001722        
007113  001723       //////// Digits  ///////////////
007114  001724        
007115  001725          img_Show(hndl, iprobe1_digits_currentResults);  // show all digits at 0, only do this once
007116  001726          ledDigitsDisplay(TEMP_ARRAY[1], iprobe1_digits_currentResults+1, 13, 3, 1, 35, 0) ;
007117  001727        
007118  001728          img_Show(hndl, iprobe2_digits_currentResults);  // show all digits at 0, only do this once
007119  001729          ledDigitsDisplay(TEMP_ARRAY[2], iprobe2_digits_currentResults+1, 173, 3, 1, 35, 0) ;
007120  001730        
007121  001731          img_Show(hndl, iprobe3_digits_currentResults);  // show all digits at 0, only do this once
007122  001732          ledDigitsDisplay(TEMP_ARRAY[3], iprobe3_digits_currentResults+1, 321, 3, 1, 35, 0) ;
007123  001733        
007124  001734          img_Show(hndl, imaxAirTemp_digits_currentResults);  // show all digits at 0, only do this once
007125  001735          ledDigitsDisplay(TEMP_ARRAY[0], imaxAirTemp_digits_currentResults+1, 13, 3, 1, 35, 0) ;
007126  001736        
007127  001737        
007128  001738        
007129  001739         // elapseTime_hours_digits_currentResults 1.0 generated 2/8/2017 2:43:34 PM
007130  001740         img_Show(hndl, ielapseTime_hours_digits_currentResults);  // show all digits at 0, only do this once
007131  001741         ledDigitsDisplay(TimeElapsedHrs, ielapseTime_hours_digits_currentResults+1, 170, 1, 1, 35, 0) ;
007132  001742        
007133  001743        
007134  001744          // elapseTime_mins_digits_currentResults 1.0 generated 2/8/2017 2:46:14 PM
007135  001745          img_Show(hndl, ielapseTime_mins_digits_currentResults);  // show all digits at 0, only do this once
007136  001746          ledDigitsDisplay(TimeElapsedMin, ielapseTime_mins_digits_currentResults+1, 220, 2, 1, 35, 0) ;
007137  001747        
007138  001748       break;
007139  001749        
007140  001750        
007141  001751        case FORM_19_COUNTDOWN_TO_SHUT_OFF:
007142  001752        
007143  001753        // Form19 1.1 generated 4/28/2016 8:53:24 AM
007144  001754        img_Show(hndl,iForm19) ;
007145  001755        
007146  001756        /////// Rectangle
007147  001757        gfx_OutlineColour(WHITE) ;
007148  001758        gfx_LinePattern(LPFINE) ;
007149  001759        gfx_RectangleFilled(0, 0, 479, 23, 0xD6BB) ;
007150  001760        gfx_OutlineColour(BLACK) ;
007151  001761        gfx_LinePattern(LPSOLID) ;
007152  001762        
007153  001763        ///////EmergencyShutOff button
007154  001764        img_ClearAttributes(hndl, iEmergencyShutOff_btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007155  001765        img_Show(hndl, iEmergencyShutOff_btn);  // show button, only do this once
007156  001766        img_SetWord(hndl, iEmergencyShutOff_btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007157  001767        img_Show(hndl,iEmergencyShutOff_btn) ;
007158  001768        
007159  001769        img_Show(hndl,iCoolDownText) ;
007160  001770        
007161  001771        // ShuttingDownText
007162  001772        img_Show(hndl,iShuttingDownText) ;
007163  001773        
007164  001774        // SecsText
007165  001775        img_Show(hndl,iSecsText) ;
007166  001776        
007167  001777         //CountDown Digits
007168  001778         img_Show(hndl, iCountDown_Digits);  // show all digits at 0, only do this once
007169  001779          ledDigitsDisplay(000, iCountDown_Digits+1, 118, 3, 1, 81, 0) ;
007170  001780        
007171  001781        break;
007172  001782        
007173  001783        case FORM_20_EMERGENCY_SHUTDOWN:
007174  001784        
007175  001785        img_Show(hndl,iForm20) ;
007176  001786        
007177  001787        // EmergencyText
007178  001788        img_Show(hndl,iEmergencyText) ;
007179  001789        
007180  001790        
007181  001791        
007182  001792        break;
007183  001793        
007184  001794          case FORM_21_UTILITIES:
007185  001795               PrevFormErrorIdenification := previousLink;
007186  001796               img_Show(hndl,iForm21) ;
007187  001797        
007188  001798        
007189  001799        
007190  001800        
007191  001801        
007192  001802        
007193  001803                if(VERSION_CELL_MAJOR == 0)
007194  001804               //   print("version Cell Major is zero");
007195  001805                  img_Show(hndl,iCellConnectionText) ;
007196  001806               else if (VERSION_CELL_MAJOR >0 || request_Cell_Strength()!= cellSignalStrength)
007197  001807        
007198  001808                if (previousLink == FORM_11_CURRENT_RESULTS)
007199  001809                      img_Show(hndl,iLoadingBG) ;  //place holder image while attempting to get cell strength
007200  001810                      img_Show(hndl,iLoadingText) ;
007201  001811                      request_Cell_Strength();
007202  001812                      while (cellSignalStrength > 5)
007203  001813                      request_Cell_Strength();
007204  001814                      wend
007205  001815                    //  print(cellSignalStrength);
007206  001816                      if (cellSignalStrength < 0)
007207  001817                      cellSignalStrength := 0;
007208  001818                      endif
007209  001819                     // pause(5000);
007210  001820                      utilitiesFormReset();
007211  001821               else
007212  001822                    img_Show(hndl,iLoadingBG) ;  //place holder image while attempting to get cell strength
007213  001823                    img_Show(hndl,iLoadingText) ;
007214  001824                      request_Cell_Strength_Exist();
007215  001825        
007216  001826                    //  print(cellSignalStrength);
007217  001827                    // pause(5000);
007218  001828                      utilitiesFormReset();
007219  001829              endif
007220  001830        
007221  001831              endif
007222  001832        
007223  001833      // cellStrengthText 1.0 generated 10/31/2016 12:53:55 PM
007224  001834      img_Show(hndl,icellStrengthText) ;
007225  001835        
007226  001836      // back_btn_utilites 1.0 generated 10/31/2016 12:53:55 PM
007227  001837      img_ClearAttributes(hndl, iback_btn_utilites, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007228  001838      img_Show(hndl, iback_btn_utilites);  // show button, only do this once
007229  001839      img_SetWord(hndl, iback_btn_utilites, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007230  001840      img_Show(hndl,iback_btn_utilites) ;
007231  001841        
007232  001842      // cellVersionText 1.0 generated 10/31/2016 12:53:55 PM
007233  001843      img_Show(hndl,icellVersionText) ;
007234  001844        
007235  001845      // ArduinoVersionText 1.0 generated 10/31/2016 12:53:55 PM
007236  001846      img_Show(hndl,iArduinoVersionText) ;
007237  001847        
007238  001848      // ScreenVersionText 1.0 generated 10/31/2016 12:53:55 PM
007239  001849      img_Show(hndl,iScreenVersionText) ;
007240  001850        
007241  001851      // CellStrengthDigit 1.0 generated 10/31/2016 12:53:55 PM
007242  001852      img_Show(hndl, iCellStrengthDigit);  // show all digits at 0, only do this once
007243  001853      ledDigitsDisplay(cellSignalStrength, iCellStrengthDigit+1, 192, 1, 1, 34, 1) ;
007244  001854        
007245  001855        
007246  001856      // ArduinoVersionMajorDigit 1.0 generated 10/31/2016 12:53:55 PM
007247  001857      img_Show(hndl, iArduinoVersionMajorDigit);  // show all digits at 0, only do this once
007248  001858      ledDigitsDisplay(VERSION_ARDUINO_MAJOR, iArduinoVersionMajorDigit+1, 192, 2, 1, 34, 0) ;
007249  001859        
007250  001860      // ArduinoMinorlDigit 1.0 generated 10/31/2016 12:53:55 PM
007251  001861      img_Show(hndl, iArduinoMinorlDigit);  // show all digits at 0, only do this once
007252  001862      ledDigitsDisplay(VERSION_ARDUINO_MINOR, iArduinoMinorlDigit+1, 268, 2, 1, 34, 0) ;
007253  001863        
007254  001864      // ArduinoMinorDecimalText 1.0 generated 10/31/2016 12:53:55 PM
007255  001865      img_Show(hndl,iArduinoMinorDecimalText) ;
007256  001866        
007257  001867      // ArduinoPatchDigit 1.0 generated 10/31/2016 12:53:56 PM
007258  001868      img_Show(hndl, iArduinoPatchDigit);  // show all digits at 0, only do this once
007259  001869      ledDigitsDisplay(VERSION_ARDUINO_PATCH, iArduinoPatchDigit+1, 342, 2, 1, 34, 0) ;
007260  001870        
007261  001871      // ScreenVersionMajorDigit 1.0 generated 10/31/2016 12:53:56 PM
007262  001872      img_Show(hndl, iScreenVersionMajorDigit);  // show all digits at 0, only do this once
007263  001873      ledDigitsDisplay(VERSION_SCREEN_MAJOR, iScreenVersionMajorDigit+1, 192, 2, 1, 34, 0) ;
007264  001874        
007265  001875      // ScreenMajorDecimalText 1.0 generated 10/31/2016 12:53:56 PM
007266  001876      img_Show(hndl,iScreenMajorDecimalText) ;
007267  001877        
007268  001878      // ArduinoMajorDecimalText 1.0 generated 10/31/2016 12:53:56 PM
007269  001879      img_Show(hndl,iArduinoMajorDecimalText) ;
007270  001880        
007271  001881      // ScreenMinorlDigit 1.0 generated 10/31/2016 12:53:56 PM
007272  001882      img_Show(hndl, iScreenMinorlDigit);  // show all digits at 0, only do this once
007273  001883      ledDigitsDisplay(VERSION_SCREEN_MINOR, iScreenMinorlDigit+1, 268, 2, 1, 34, 0) ;
007274  001884        
007275  001885      // ScreenMinorDecimalText 1.0 generated 10/31/2016 12:53:56 PM
007276  001886      img_Show(hndl,iScreenMinorDecimalText) ;
007277  001887        
007278  001888      // ScreenPatchDigit 1.0 generated 10/31/2016 12:53:56 PM
007279  001889      img_Show(hndl, iScreenPatchDigit);  // show all digits at 0, only do this once
007280  001890      ledDigitsDisplay(VERSION_SCREEN_PATCH, iScreenPatchDigit+1, 342, 2, 1, 34, 0) ;
007281  001891        
007282  001892      // LogButton 1.0 generated 3/14/2017 11:01:17 AM
007283  001893               img_ClearAttributes(hndl, iLogButton, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007284  001894               img_Show(hndl, iLogButton);  // show button, only do this once
007285  001895               img_SetWord(hndl, iLogButton, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007286  001896               img_Show(hndl,iLogButton) ;
007287  001897        
007288  001898        if(previousLink != FORM_11_CURRENT_RESULTS)
007289  001899             // next_btn_utilities 1.0 generated 3/1/2017 3:22:51 PM
007290  001900             img_ClearAttributes(hndl, inext_btn_utilities, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007291  001901             img_Show(hndl, inext_btn_utilities);  // show button, only do this once
007292  001902             img_SetWord(hndl, inext_btn_utilities, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007293  001903             img_Show(hndl,inext_btn_utilities) ;
007294  001904          endif
007295  001905        
007296  001906        break;
007297  001907        
007298  001908        case FORM_22_ESTABLISHING_CONNECTION:
007299  001909        
007300  001910            img_Show(hndl,iForm22) ;
007301  001911            img_Show(hndl,iConnectionTitle) ;
007302  001912            img_Show(hndl,iconnectionBodyText) ;
007303  001913        
007304  001914            img_ClearAttributes(hndl, iContWithoutCell_btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007305  001915            img_Show(hndl, iContWithoutCell_btn);  // show button, only do this once
007306  001916            img_SetWord(hndl, iContWithoutCell_btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007307  001917            img_Show(hndl,iContWithoutCell_btn) ;
007308  001918        
007309  001919            img_Show(hndl,iProceedWithoutcellText) ;
007310  001920        
007311  001921        break;
007312  001922        
007313  001923           case FORM_24_IDENTIFYING_PROBES:
007314  001924        
007315  001925           // Form24 1.1 generated 2/28/2017 11:47:48 AM
007316  001926           img_Show(hndl,iForm24) ;
007317  001927        
007318  001928           // ProbeErrorTitle 1.0 generated 2/28/2017 11:47:50 AM
007319  001929           img_Show(hndl,iProbeErrorTitle) ;
007320  001930        
007321  001931           // StartProbeIdent_btn 1.0 generated 2/28/2017 11:47:50 AM
007322  001932           img_ClearAttributes(hndl, iStartProbeIdent_btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007323  001933           img_Show(hndl, iStartProbeIdent_btn);  // show button, only do this once
007324  001934           img_SetWord(hndl, iStartProbeIdent_btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007325  001935           img_Show(hndl,iStartProbeIdent_btn) ;
007326  001936        
007327  001937           switch(probe_idenification_number)
007328  001938        
007329  001939              case PROBE_AIR_TEMP:
007330  001940                  // AirTempProbe_Text 1.0 generated 2/28/2017 11:47:50 AM
007331  001941                  img_Show(hndl,iAirTempProbe_Text) ;
007332  001942              break;
007333  001943        
007334  001944              case PROBE_01:
007335  001945                  // Probe1_text 1.0 generated 2/28/2017 11:55:56 AM
007336  001946                  img_Show(hndl,iProbe1_Text) ;
007337  001947              break;
007338  001948        
007339  001949              case PROBE_02:
007340  001950                  // Probe1_Text 1.0 generated 2/28/2017 11:58:42 AM
007341  001951                  img_Show(hndl,iProbe2_Text);
007342  001952              break;
007343  001953        
007344  001954              case PROBE_03:
007345  001955                  // Probe3_Text 1.0 generated 2/28/2017 12:00:43 PM
007346  001956                  img_Show(hndl,iProbe3_Text) ;
007347  001957              break;
007348  001958        
007349  001959              default:
007350  001960        
007351  001961        
007352  001962              break;
007353  001963        
007354  001964        
007355  001965            endswitch
007356  001966        
007357  001967        
007358  001968           break;
007359  001969            case FORM_25_PROBE_IDENTIFICATION_COMPLETE:
007360  001970        
007361  001971            // Form25 1.1 generated 2/28/2017 1:05:42 PM
007362  001972            img_Show(hndl,iForm25) ;
007363  001973              switch(probe_idenification_number)
007364  001974        
007365  001975              case PROBE_SUCCESSFULLY_IDENTIFIED:
007366  001976            // ProbeIdentSuccessful_Text 1.0 generated 2/28/2017 1:05:42 PM
007367  001977            img_Show(hndl,iProbeIdentSuccessful_Text) ;
007368  001978                pause(2500);
007369  001979                 break;
007370  001980        
007371  001981              case PROBE_UNSUCCESSFULLY_IDENTIFIED:
007372  001982                  img_Show(hndl,iProbeIdentUnsuccessful_TitleText) ;
007373  001983                  img_Show(hndl,iProbeIdentUnsuccessful_Text) ;
007374  001984        
007375  001985                  img_ClearAttributes(hndl, iretryProbeConnect_btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007376  001986                  img_Show(hndl, iretryProbeConnect_btn);  // show button, only do this once
007377  001987                  img_SetWord(hndl, iretryProbeConnect_btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007378  001988                  img_Show(hndl,iretryProbeConnect_btn) ;
007379  001989        
007380  001990              break;
007381  001991        
007382  001992              case PROBE_INITIATION_COMPLETE:
007383  001993        
007384  001994                  img_Show(hndl,iProbeInitiationComplete_text) ;
007385  001995        
007386  001996              endswitch
007387  001997              break;
007388  001998        
007389  001999              case FORM_26_REIDENTIFY_PROBES:
007390  002000        
007391  002001              // Form26 1.1 generated 3/1/2017 3:16:49 PM
007392  002002              img_Show(hndl,iForm26) ;
007393  002003        
007394  002004              // reidentifying_text 1.0 generated 3/1/2017 3:16:52 PM
007395  002005              img_Show(hndl,ireidentifying_text) ;
007396  002006        
007397  002007              // reidentifyPronesYes_btn 1.0 generated 3/1/2017 3:16:52 PM
007398  002008              img_ClearAttributes(hndl, ireidentifyProbesYes_btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007399  002009              img_Show(hndl, ireidentifyProbesYes_btn);  // show button, only do this once
007400  002010              img_SetWord(hndl, ireidentifyProbesYes_btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007401  002011              img_Show(hndl,ireidentifyProbesYes_btn) ;
007402  002012        
007403  002013              // reidentifyPronesNo_btn 1.0 generated 3/1/2017 3:16:52 PM
007404  002014              img_ClearAttributes(hndl, ireidentifyProbesNo_btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007405  002015              img_Show(hndl, ireidentifyProbesNo_btn);  // show button, only do this once
007406  002016              img_SetWord(hndl, ireidentifyProbesNo_btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007407  002017              img_Show(hndl,ireidentifyProbesNo_btn) ;
007408  002018        
007409  002019              break;
007410  002020        
007411  002021              case FORM_27_SEND_LOG_FILES:
007412  002022        
007413  002023              // Form27 1.1 generated 3/14/2017 10:32:35 AM
007414  002024              img_Show(hndl,iForm27) ;
007415  002025        
007416  002026              // Log_Title 1.0 generated 3/14/2017 10:32:36 AM
007417  002027              img_Show(hndl,iLog_Title) ;
007418  002028        
007419  002029              // Log_Yes_Btn 1.0 generated 3/14/2017 10:32:36 AM
007420  002030              img_ClearAttributes(hndl, iLog_Yes_Btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007421  002031              img_Show(hndl, iLog_Yes_Btn);  // show button, only do this once
007422  002032              img_SetWord(hndl, iLog_Yes_Btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007423  002033              img_Show(hndl,iLog_Yes_Btn) ;
007424  002034        
007425  002035              // Log_No_btn 1.0 generated 3/14/2017 10:32:36 AM
007426  002036              img_ClearAttributes(hndl, iLog_No_btn, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007427  002037              img_Show(hndl, iLog_No_btn);  // show button, only do this once
007428  002038              img_SetWord(hndl, iLog_No_btn, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007429  002039              img_Show(hndl,iLog_No_btn) ;
007430  002040        
007431  002041              break;
007432  002042        
007433  002043              case FORM_28_NO_CELL_DURING_TREATMENT:
007434  002044        
007435  002045              // Form28 1.1 generated 3/14/2017 10:51:06 AM
007436  002046              img_Show(hndl,iForm28) ;
007437  002047        
007438  002048              // NoCellTitle 1.0 generated 3/14/2017 10:51:07 AM
007439  002049              img_Show(hndl,iNoCellTitle) ;
007440  002050              pause(5000);
007441  002051                   currentForm := FORM_27_SEND_LOG_FILES;
007442  002052                  gotoCurrentForm(0);
007443  002053              break;
007444  002054        
007445  002055          endswitch
007446  002056        
007447  002057  endfunc
007448  002058  /////////////////////////////// Clear Pin ///////////////////////////////////////////
007449  002059  func clearPin ()
007450  002060      var i;
007451  002061          for(i := 0; i< 5 ; i ++)
007452  002062              cellPin[i] := 0;//
007453  002063          next
007454  002064  endfunc
007455  002065        
007456  002066  //////////////////////////////// Button Pressed And Release Combo /////////////////////////////////
007457  002067  func btnPressAndRelease(var _btnPress)
007458  002068      btnPress( _btnPress);
007459  002069      pause(200);
007460  002070      btnPressReset(_btnPress);
007461  002071  endfunc
007462  002072        
007463  002073        
007464  002074        
007465  002075  //////////////////////////////// Button Pressed /////////////////////////////////
007466  002076  func btnPress (var _btnPress)
007467  002077      img_SetWord(hndl, _btnPress, IMAGE_INDEX, state1);
007468  002078      img_Show(hndl, _btnPress);
007469  002079  endfunc
007470  002080  //////////////////////////////// press and realease switch between two buttons /////////////////////////////////
007471  002081  func switchBtnPress ( var _btnPressOff, var _btnPressOn)
007472  002082      img_SetWord(hndl, _btnPressOn, IMAGE_INDEX, state);
007473  002083      img_Show(hndl, _btnPressOn);
007474  002084      img_SetWord(hndl, _btnPressOff, IMAGE_INDEX, state1);
007475  002085      img_Show(hndl, _btnPressOff);
007476  002086  endfunc
007477  002087  //////////////////////////////// Brings button back to urpressed state /////////////////////////////////
007478  002088  func btnPressReset(var _btnPress)
007479  002089      img_SetWord(hndl,  _btnPress, IMAGE_INDEX, state);
007480  002090     // img_Show(hndl, _btnPress) ;
007481  002091  endfunc
007482  002092        
007483  002093  //////////////////////////////// quickly presses and releases button/////////////////////////////////
007484  002094  func tempBtnHighlight(var _btnPress)
007485  002095      img_SetWord(hndl,  _btnPress, IMAGE_INDEX, state1);
007486  002096      img_Show(hndl, _btnPress) ;
007487  002097      pause(150);
007488  002098      img_SetWord(hndl,  _btnPress, IMAGE_INDEX, state);
007489  002099      img_Show(hndl, _btnPress) ;
007490  002100  endfunc
007491  002101        
007492  002102  ///////////////////////changes the state of the button to the opposite//////////////////////
Notice: in func 'btnState' function argument 'state' shadows global var with same name (line 2103 file:TouchScreen 5-4-16.4dg)
007493  002103   func btnState(var state)
007494  002104      if( state == 1)
007495  002105          state --;
007496  002106      else if(state == 0)
007497  002107          state ++;
007498  002108      endif
007499  002109  endfunc
007500  002110        
007501  002111  ////////////////////////takes you to the "please select 'option' form"///////////////////
007502  002112  func selectBtn(var _textDisplay, var returnToForm)
007503  002113      currentForm := FORM_13_SELECTION_REMINDER;
007504  002114      gotoCurrentForm(0);
007505  002115      gfx_Cls() ;
007506  002116      img_Show(hndl,iForm13) ;
007507  002117      img_Show(hndl,_textDisplay) ;
007508  002118      pause(2000);
007509  002119      currentForm := returnToForm;
007510  002120      gotoCurrentForm(0);
007511  002121  endfunc
007512  002122        
007513  002123        
007514  002124  func backBtn(var i)
007515  002125    //  print(i);
007516  002126      i:= i-2;
007517  002127   //   print("the value of i");
007518  002128     // print(i);
007519  002129     // print(backBtnArray[i]);
007520  002130      return backBtnArray[i];
007521  002131        
007522  002132  endfunc
007523  002133        
007524  002134        
007525  002135  func fwrdBtn(var i)
007526  002136    //  print(i);
007527  002137      i:= i++;
007528  002138      //print("the value of i");
007529  002139      //print(i);
007530  002140      //print(backBtnArray[i]);
007531  002141      return backBtnArray[i];
007532  002142        
007533  002143  endfunc
007534  002144        
007535  002145        
007536  002146  ///////////////////////Cool Down Function //////////////////////
007537  002147        
007538  002148  func treatment_Stopped_Arduino()//this function is called when the arduino sends a treatment complete message to the screen after a normal treatment completion
007539  002149        
007540  002150  endfunc
007541  002151        
007542  002152        
007543  002153  func displayCoolDown()
007544  002154      var coolDownTime;
007545  002155        
007546  002156      if (time_iterator_for_serin(SCREEN_COOLDOWN_MESSAGE_LENGTH) == TRUE)
007547  002157        
007548  002158          if(currentForm != FORM_19_COUNTDOWN_TO_SHUT_OFF && currentForm != FORM_20_EMERGENCY_SHUTDOWN && currentForm != FORM_18_TREATMENT_RESULTS)
007549  002159              currentForm := FORM_19_COUNTDOWN_TO_SHUT_OFF;
007550  002160              gotoCurrentForm(0);
007551  002161          endif
007552  002162        
007553  002163          coolDownTime := serin();
007554  002164        
007555  002165          if (coolDownTime >0 && coolDownTime <= MAX_8BIT_VALUE && currentForm != FORM_20_EMERGENCY_SHUTDOWN && currentForm != FORM_18_TREATMENT_RESULTS)
007556  002166        
007557  002167              ledDigitsDisplay(coolDownTime, iCountDown_Digits+1, 118, 3, 1, 81, 0) ;
007558  002168        
007559  002169          else  if (coolDownTime == 0 && currentForm != FORM_18_TREATMENT_RESULTS)
007560  002170              currentForm := FORM_18_TREATMENT_RESULTS;
007561  002171              gotoCurrentForm(0);
007562  002172          endif
007563  002173       endif
007564  002174  endfunc
007565  002175        
007566  002176        
007567  002177  ///////////////////////Displays current temps //////////////////////
007568  002178  func displayCurrentTemp()
007569  002179      if(etaHrs==0 && etaMin == 0)
007570  002180          img_Show(hndl,ina_estTime) ;
007571  002181          if (k==1)
007572  002182              formReset();
007573  002183              img_Show(hndl,ina_estTime) ;
007574  002184               k--;
007575  002185          endif
007576  002186        
007577  002187      else if (etaHrs >0 || etaMin > 0)
007578  002188          if(k< 1)
007579  002189              formReset();
007580  002190              k++;
007581  002191          endif
007582  002192        
007583  002193         // img_Show(hndl, iestTimeRemaining_hrs_digits_currentResults);  // show all digits at 0, only do this once
007584  002194          ledDigitsDisplay(etaHrs, iestTimeRemaining_hrs_digits_currentResults+1, 334, 1, 1, 35, 0) ;
007585  002195        
007586  002196        //  img_Show(hndl, iestTimeRemaining_min_digits_currentResults);  // show all digits at 0, only do this once
007587  002197          ledDigitsDisplay(etaMin, iestTimeRemaining_min_digits_currentResults+1, 383, 2, 1, 35, 0) ;
007588  002198        
007589  002199          img_Show(hndl,iestTimeRemaining_mins_text) ;
007590  002200          img_Show(hndl,iestTimeRemaining_hrs_text) ;
007591  002201      endif
007592  002202     //********* Probe Digits *********//
007593  002203           ledDigitsDisplay(TEMP_ARRAY[3], iprobe3_digits_currentResults+1, 321, 3, 1, 35, 0) ;
007594  002204           ledDigitsDisplay(TEMP_ARRAY[1], iprobe1_digits_currentResults+1, 13, 3, 1, 35, 0) ;
007595  002205           ledDigitsDisplay(TEMP_ARRAY[2], iprobe2_digits_currentResults+1, 173, 3, 1, 35, 0) ;
007596  002206        
007597  002207      //********* Max air temp digits *********///
007598  002208             ledDigitsDisplay(TEMP_ARRAY[0], imaxAirTemp_digits_currentResults+1, 13, 3, 1, 35, 0) ;
007599  002209        
007600  002210        
007601  002211      //********* Elapse Time digits *********//
007602  002212          ledDigitsDisplay(TimeElapsedHrs, ielapseTime_hours_digits_currentResults+1, 170, 1, 1, 35, 0) ;
007603  002213        
007604  002214        
007605  002215          // elapseTime_mins_digits_currentResults 1.0 generated 2/8/2017 2:46:45 PM
007606  002216            ledDigitsDisplay(TimeElapsedMin, ielapseTime_mins_digits_currentResults+1, 220, 2, 1, 35, 0) ;
007607  002217        
007608  002218       //********* Elapse Time hours and mins *********//
007609  002219          img_Show(hndl,ielapseTime_hr_text) ;
007610  002220          img_Show(hndl,ielapseTime_min_text) ;
007611  002221        
007612  002222  endfunc
007613  002223        
007614  002224        
007615  002225        
007616  002226  //////////////////Displays current results form again when called//////////////
007617  002227  func formReset()
007618  002228      gfx_Cls() ;
007619  002229      img_Show(hndl,iForm11) ;
007620  002230        
007621  002231      ///*********Title*********///
007622  002232      gfx_OutlineColour(WHITE) ;
007623  002233      gfx_LinePattern(LPFINE) ;
007624  002234      gfx_RectangleFilled(0, 0, 479, 23, 0xD6BB) ;
007625  002235      gfx_OutlineColour(BLACK) ;
007626  002236      gfx_LinePattern(LPSOLID) ;
007627  002237        
007628  002238      img_Show(hndl,icurrentResultsTitle) ;
007629  002239     //********* Digits*********//
007630  002240        
007631  002241      img_Show(hndl, iprobe1_digits_currentResults);  // show all digits at 0, only do this once
007632  002242      ledDigitsDisplay(TEMP_ARRAY[0], iprobe1_digits_currentResults+1, 13, 3, 1, 35, 0) ;
007633  002243        
007634  002244      img_Show(hndl, iprobe2_digits_currentResults);  // show all digits at 0, only do this once
007635  002245      ledDigitsDisplay(TEMP_ARRAY[2], iprobe2_digits_currentResults+1, 173, 3, 1, 35, 0) ;
007636  002246        
007637  002247      img_Show(hndl, iprobe3_digits_currentResults);  // show all digits at 0, only do this once
007638  002248      ledDigitsDisplay(TEMP_ARRAY[3], iprobe3_digits_currentResults+1, 321, 3, 1, 35, 0) ;
007639  002249        
007640  002250      img_Show(hndl, imaxAirTemp_digits_currentResults);  // show all digits at 0, only do this once
007641  002251      ledDigitsDisplay(TEMP_ARRAY[0], imaxAirTemp_digits_currentResults+1, 13, 3, 1, 35, 0) ;
007642  002252        
007643  002253        
007644  002254      //********* Probe text *********//
007645  002255      img_Show(hndl,iprobe1Text_currentResults) ;
007646  002256      img_Show(hndl,iprobe2Text_currentResults) ;
007647  002257      img_Show(hndl,iprobe3Text_currentResults) ;
007648  002258        
007649  002259      img_Show(hndl,imaxAirTempText_currentResutls) ;
007650  002260      img_Show(hndl,ielapseTimeText_currentResutls) ;
007651  002261      img_Show(hndl,iestTimeRemaining_currentResults) ;
007652  002262        
007653  002263      //////// "F" degrees text ///////////////
007654  002264      img_Show(hndl,iprobe1F_text) ;
007655  002265      img_Show(hndl,iprobe2F_text) ;
007656  002266      img_Show(hndl,iprobe3F_text) ;
007657  002267      img_Show(hndl,iMaxAirTempF_text) ;
007658  002268      //////// Elapse Time "hr" text ///////////////
007659  002269      img_Show(hndl,ielapseTime_hr_text) ;
007660  002270      //////// Elapse Time "min" text ///////////////
007661  002271      img_Show(hndl,ielapseTime_min_text) ;
007662  002272        
007663  002273      //********* Menu *********//
007664  002274      img_ClearAttributes(hndl, ibackBtn_currentResults, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007665  002275      img_Show(hndl, ibackBtn_currentResults);  // show button, only do this once
007666  002276      img_SetWord(hndl, ibackBtn_currentResults, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007667  002277        
007668  002278      img_ClearAttributes(hndl, imenuBtn_currentResults, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007669  002279      img_Show(hndl, imenuBtn_currentResults);  // show button, only do this once
007670  002280      img_SetWord(hndl, imenuBtn_currentResults, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007671  002281        
007672  002282      img_ClearAttributes(hndl, istopBtn_currentResults, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007673  002283      img_Show(hndl, istopBtn_currentResults);  // show button, only do this once
007674  002284      img_SetWord(hndl, istopBtn_currentResults, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007675  002285        
007676  002286      img_ClearAttributes(hndl, inextBtn_currentResults, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007677  002287      img_Show(hndl, inextBtn_currentResults);  // show button, only do this once
007678  002288      img_SetWord(hndl, inextBtn_currentResults, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total state
007679  002289        
007680  002290  endfunc
007681  002291        
007682  002292  func utilitiesFormReset()
007683  002293      gfx_Cls() ;
007684  002294      img_Show(hndl,iForm21) ;
007685  002295        
007686  002296      // cellStrengthText 1.0 generated 10/31/2016 12:53:55 PM
007687  002297      img_Show(hndl,icellStrengthText) ;
007688  002298        
007689  002299      // back_btn_utilites 1.0 generated 10/31/2016 12:53:55 PM
007690  002300      img_ClearAttributes(hndl, iback_btn_utilites, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007691  002301      img_Show(hndl, iback_btn_utilites);  // show button, only do this once
007692  002302      img_SetWord(hndl, iback_btn_utilites, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007693  002303      img_Show(hndl,iback_btn_utilites) ;
007694  002304        
007695  002305      // cellVersionText 1.0 generated 10/31/2016 12:53:55 PM
007696  002306      img_Show(hndl,icellVersionText) ;
007697  002307        
007698  002308      // ArduinoVersionText 1.0 generated 10/31/2016 12:53:55 PM
007699  002309      img_Show(hndl,iArduinoVersionText) ;
007700  002310        
007701  002311      // ScreenVersionText 1.0 generated 10/31/2016 12:53:55 PM
007702  002312      img_Show(hndl,iScreenVersionText) ;
007703  002313        
007704  002314      // CellStrengthDigit 1.0 generated 10/31/2016 12:53:55 PM
007705  002315      img_Show(hndl, iCellStrengthDigit);  // show all digits at 0, only do this once
007706  002316      ledDigitsDisplay(cellSignalStrength, iCellStrengthDigit+1, 192, 1, 1, 34, 1) ;
007707  002317        
007708  002318      // CellVersionMajorDigit 1.0 generated 10/31/2016 12:53:55 PM
007709  002319      img_Show(hndl, iCellVersionMajorDigit);  // show all digits at 0, only do this once
007710  002320      ledDigitsDisplay(VERSION_CELL_MAJOR, iCellVersionMajorDigit+1, 192, 2, 1, 34, 0) ;
007711  002321        
007712  002322      // CellMajorDecimalText 1.0 generated 10/31/2016 12:53:55 PM
007713  002323      img_Show(hndl,iCellMajorDecimalText) ;
007714  002324        
007715  002325      // CellMinorlDigit 1.0 generated 10/31/2016 12:53:55 PM
007716  002326      img_Show(hndl, iCellMinorlDigit);  // show all digits at 0, only do this once
007717  002327      ledDigitsDisplay(VERSION_CELL_MINOR, iCellMinorlDigit+1, 268, 2, 1, 34, 0) ;
007718  002328        
007719  002329      // CellMinorDecimalText 1.0 generated 10/31/2016 12:53:55 PM
007720  002330      img_Show(hndl,iCellMinorDecimalText) ;
007721  002331        
007722  002332      // CellPatchDigit 1.0 generated 10/31/2016 12:53:55 PM
007723  002333      img_Show(hndl, iCellPatchDigit);  // show all digits at 0, only do this once
007724  002334      ledDigitsDisplay(VERSION_CELL_PATCH, iCellPatchDigit+1, 342, 2, 1, 34, 0) ;
007725  002335        
007726  002336      // ArduinoVersionMajorDigit 1.0 generated 10/31/2016 12:53:55 PM
007727  002337      img_Show(hndl, iArduinoVersionMajorDigit);  // show all digits at 0, only do this once
007728  002338      ledDigitsDisplay(VERSION_ARDUINO_MAJOR, iArduinoVersionMajorDigit+1, 192, 2, 1, 34, 0) ;
007729  002339        
007730  002340      // ArduinoMinorlDigit 1.0 generated 10/31/2016 12:53:55 PM
007731  002341      img_Show(hndl, iArduinoMinorlDigit);  // show all digits at 0, only do this once
007732  002342      ledDigitsDisplay(VERSION_ARDUINO_MINOR, iArduinoMinorlDigit+1, 268, 2, 1, 34, 0) ;
007733  002343        
007734  002344      // ArduinoMinorDecimalText 1.0 generated 10/31/2016 12:53:55 PM
007735  002345      img_Show(hndl,iArduinoMinorDecimalText) ;
007736  002346        
007737  002347      // ArduinoPatchDigit 1.0 generated 10/31/2016 12:53:56 PM
007738  002348      img_Show(hndl, iArduinoPatchDigit);  // show all digits at 0, only do this once
007739  002349      ledDigitsDisplay(VERSION_ARDUINO_PATCH, iArduinoPatchDigit+1, 342, 2, 1, 34, 0) ;
007740  002350        
007741  002351      // ScreenVersionMajorDigit 1.0 generated 10/31/2016 12:53:56 PM
007742  002352      img_Show(hndl, iScreenVersionMajorDigit);  // show all digits at 0, only do this once
007743  002353      ledDigitsDisplay(VERSION_SCREEN_MAJOR, iScreenVersionMajorDigit+1, 192, 2, 1, 34, 0) ;
007744  002354        
007745  002355      // ScreenMajorDecimalText 1.0 generated 10/31/2016 12:53:56 PM
007746  002356      img_Show(hndl,iScreenMajorDecimalText) ;
007747  002357        
007748  002358      // ArduinoMajorDecimalText 1.0 generated 10/31/2016 12:53:56 PM
007749  002359      img_Show(hndl,iArduinoMajorDecimalText) ;
007750  002360        
007751  002361      // ScreenMinorlDigit 1.0 generated 10/31/2016 12:53:56 PM
007752  002362      img_Show(hndl, iScreenMinorlDigit);  // show all digits at 0, only do this once
007753  002363      ledDigitsDisplay(VERSION_SCREEN_MINOR, iScreenMinorlDigit+1, 268, 2, 1, 34, 0) ;
007754  002364        
007755  002365      // ScreenMinorDecimalText 1.0 generated 10/31/2016 12:53:56 PM
007756  002366      img_Show(hndl,iScreenMinorDecimalText) ;
007757  002367        
007758  002368      // ScreenPatchDigit 1.0 generated 10/31/2016 12:53:56 PM
007759  002369      img_Show(hndl, iScreenPatchDigit);  // show all digits at 0, only do this once
007760  002370      ledDigitsDisplay(VERSION_SCREEN_PATCH, iScreenPatchDigit+1, 342, 2, 1, 34, 0) ;
007761  002371        
007762  002372        
007763  002373      // LogButton 1.0 generated 3/14/2017 11:01:52 AM
007764  002374      img_ClearAttributes(hndl, iLogButton, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007765  002375      img_Show(hndl, iLogButton);  // show button, only do this once
007766  002376      img_SetWord(hndl, iLogButton, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007767  002377      img_Show(hndl,iLogButton) ;
007768  002378        
007769  002379        
007770  002380       if(previousLink != FORM_11_CURRENT_RESULTS)
007771  002381        
007772  002382         // next_btn_utilities 1.0 generated 3/1/2017 3:22:51 PM
007773  002383         img_ClearAttributes(hndl, inext_btn_utilities, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
007774  002384         img_Show(hndl, inext_btn_utilities);  // show button, only do this once
007775  002385         img_SetWord(hndl, inext_btn_utilities, IMAGE_INDEX, state); // where state is 0 for up and 1 for down, or 2 total states
007776  002386          img_Show(hndl,inext_btn_utilities) ;
007777  002387        endif
007778  002388        
007779  002389  endfunc
007780  002390        
007781  002391  ////////////////// Assigns number vaulues to pressed buttons //////////////
007782  002392  func BtnNumber(var _touchImgIndex)
007783  002393      var btnValue;
007784  002394        
007785  002395      switch(_touchImgIndex)
007786  002396        
007787  002397      //********* Circuit Values *********//  Form 3
007788  002398          case (i2circuitsBtn):
007789  002399              btnValue:= 2;
007790  002400          break;
007791  002401        
007792  002402          case (i3circuitsBtn):
007793  002403              btnValue:= 3;
007794  002404          break;
007795  002405        
007796  002406      //********* Amp Values *********// Form 4
007797  002407          case (i15ampsBtn):
007798  002408              btnValue:= 15;
007799  002409          break;
007800  002410        
007801  002411          case (i20ampsBtn):
007802  002412              btnValue:= 20;
007803  002413          break;
007804  002414        
007805  002415      //********* Enable Cell *********// Form 6
007806  002416          case (iyesBtn_enableCell):
007807  002417              btnValue:= 1;
007808  002418          break;
007809  002419        
007810  002420          case (inoBtn_enableCell):
007811  002421              btnValue:= 0;
007812  002422          break;
007813  002423        
007814  002424  //********* Set Pin *********// Form 8
007815  002425          case (ipinBtn_0):
007816  002426              btnValue:= 0;
007817  002427          break;
007818  002428        
007819  002429          case (ipinBtn_1):
007820  002430              btnValue:= 1;
007821  002431          break;
007822  002432        
007823  002433          case (ipinBtn_2):
007824  002434              btnValue:= 2;
007825  002435          break;
007826  002436        
007827  002437          case (ipinBtn_3):
007828  002438              btnValue:= 3;
007829  002439          break;
007830  002440        
007831  002441          case (ipinBtn_4):
007832  002442              btnValue:= 4;
007833  002443          break;
007834  002444        
007835  002445          case (ipinBtn_5):
007836  002446              btnValue:= 5;
007837  002447          break;
007838  002448        
007839  002449          case (ipinBtn_6):
007840  002450              btnValue:= 6;
007841  002451          break;
007842  002452        
007843  002453          case (ipinBtn_7):
007844  002454              btnValue:= 7;
007845  002455          break;
007846  002456        
007847  002457          case (ipinBtn_8):
007848  002458              btnValue:= 8;
007849  002459          break;
007850  002460        
007851  002461          case (ipinBtn_9):
007852  002462              btnValue:= 9;
007853  002463          break;
007854  002464       //****** sets the pin digits to negative numbers if you press them ********//
007855  002465          case (isetPinDigits_00):
007856  002466              btnValue := -1;
007857  002467          break;
007858  002468        
007859  002469          case (isetPinDigits_01):
007860  002470              btnValue := -1;
007861  002471          break;
007862  002472        
007863  002473          case (isetPinDigits_02):
007864  002474              btnValue := -1;
007865  002475          break;
007866  002476        
007867  002477          case (isetPinDigits_03):
007868  002478              btnValue := -1;
007869  002479          break;
007870  002480        
007871  002481          case (isetPinDigits_04):
007872  002482              btnValue := -1;
007873  002483          break;
007874  002484        
007875  002485      endswitch
007876  002486        
007877  002487      return btnValue;
007878  002488        
007879  002489  endfunc
007880  002490        
007881  002491        
007882  002492  ////////////////// Set Temp form 5 - Target Temp minus //////////////
007883  002493  func  tTempMinusBuffer ()
007884  002494      if (tTemp > MIN_tTemp)
007885  002495          tTemp -= 5;
007886  002496          ledDigitsDisplay(tTemp, itargetTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
007887  002497      endif
007888  002498  endfunc
007889  002499        
007890  002500  ////////////////// Set Temp form 5 - Max Air Temp minus with Target Temp buffer of 10 //////////////
007891  002501  func  tTempMinusBuffer_02 ()
007892  002502        
007893  002503    if (tTemp > MIN_tTemp && (tTemp == (mAirTemp - 5)))
007894  002504          tTemp -= 5;
007895  002505         // print(tTemp);
007896  002506          ledDigitsDisplay(tTemp, itargetTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
007897  002507      endif
007898  002508  endfunc
007899  002509        
007900  002510  ////////////////// Set Temp form 5 - Target Temp add button with a buffer of 10 from Max Air Temp //////////////
007901  002511  func  tTempAddBuffer ()
007902  002512      if (tTemp < MAX_tTemp && (tTemp <= (mAirTemp - 15)))
007903  002513          tTemp += 5;
007904  002514          ledDigitsDisplay(tTemp, itargetTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
007905  002515      else if (tTemp <  MAX_tTemp && tTemp == (mAirTemp - 10))
007906  002516          tTemp += 5;
007907  002517          mAirTemp +=5;
007908  002518          ledDigitsDisplay(tTemp, itargetTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
007909  002519          ledDigitsDisplay(mAirTemp, imaxAirTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
007910  002520      else if (tTemp <  MAX_tTemp && (tTemp == MIN_tTemp && (mAirTemp == MIN_mAirTemp || mAirTemp == 125)))
007911  002521          mAirTemp +=5;
007912  002522          ledDigitsDisplay(mAirTemp, imaxAirTempDigits_tempSet+1, 59, 3, 1, 33, 0) ;
007913  002523      endif
007914  002524  endfunc
007915  002525        
007916  002526        
007917  002527  func statusErrorDisplay(var statusError)
007918  002528       runCurrentUpdate := FALSE;
007919  002529       currentForm := FORM_16_ERRORS;
007920  002530       gotoCurrentForm(0);
007921  002531       img_Show(hndl,ierror_01) ;
007922  002532        
007923  002533      switch (statusError)
007924  002534         case STATUS_POWER_LOSS_2:
007925  002535              img_Show(hndl,iPowerError_cord2_text) ;
007926  002536         break;
007927  002537         case STATUS_POWER_LOSS_3:
007928  002538              img_Show(hndl,iPowerError_cord3_text) ;
007929  002539           break;
007930  002540         case STATUS_POWER_LOSS_4:
007931  002541              img_Show(hndl,iPowerError_cord4_text) ;
007932  002542           break;
007933  002543         case STATUS_COMM_LOSS:
007934  002544              img_Show(hndl,iStatusError_ComLoss_text) ;
007935  002545          break;
007936  002546         case STATUS_PROBE_ERROR:
007937  002547              img_Show(hndl,iProbeError_text) ;
007938  002548         break;
007939  002549         case STATUS_UNABLE_TO_HEAT:
007940  002550              img_Show(hndl,iStatusError_UnableToHeat_text) ;
007941  002551          break;
007942  002552          case STATUS_PROBE_INITIATION:
007943  002553              img_Show(hndl,iProbeInitializationError_text);
007944  002554              pause(5000);
007945  002555          break;
007946  002556      endswitch
007947  002557  endfunc
007948  002558        
007949  002559  func treatmentErrors(var x_treatmentStatus)
007950  002560           statusErrors := x_treatmentStatus;
007951  002561     switch(x_treatmentStatus)
007952  002562         case STATUS_POWER_LOSS_2:
007953  002563                  runCurrentUpdate := FALSE;
007954  002564                  statusErrorDisplay(STATUS_POWER_LOSS_2);
007955  002565          break;
007956  002566         case STATUS_POWER_LOSS_3:
007957  002567                  runCurrentUpdate := FALSE;
007958  002568                  statusErrorDisplay(STATUS_POWER_LOSS_3);
007959  002569          break;
007960  002570          case STATUS_POWER_LOSS_4:
007961  002571                  runCurrentUpdate := FALSE;
007962  002572                  statusErrorDisplay(STATUS_POWER_LOSS_4);
007963  002573          break;
007964  002574          case STATUS_COMM_LOSS:
007965  002575                  runCurrentUpdate := FALSE;
007966  002576                  statusErrorDisplay(STATUS_COMM_LOSS);
007967  002577          break;
007968  002578          case STATUS_UNABLE_TO_HEAT:
007969  002579                  runCurrentUpdate := FALSE;
007970  002580                  statusErrorDisplay(STATUS_UNABLE_TO_HEAT);
007971  002581          break;
007972  002582          case STATUS_PROBE_ERROR:
007973  002583              runCurrentUpdate := FALSE;
007974  002584              statusErrorDisplay(STATUS_PROBE_ERROR);
007975  002585          break;
007976  002586          case STATUS_PROBE_INITIATION:
007977  002587              runCurrentUpdate := FALSE;
007978  002588              statusErrorDisplay(STATUS_PROBE_INITIATION);
007979  002589          break;
007980  002590          case STATUS_NOMINAL:
007981  002591                  if (currentForm == FORM_21_UTILITIES || currentForm == FORM_12_MENU || currentForm == FORM_15_STOP_TREATMENT || currentForm == FORM_18_TREATMENT_RESULTS || currentForm == FORM_19_COUNTDOWN_TO_SHUT_OFF || currentForm == FORM_20_EMERGENCY_SHUTDOWN || currentForm == FORM_2_WELCOME_SCREEN || currentForm == FORM_28_NO_CELL_DURING_TREATMENT || currentForm == FORM_27_SEND_LOG_FILES)
007982  002592                   runCurrentUpdate := FALSE;
007983  002593                  else if (currentForm != FORM_11_CURRENT_RESULTS)
007984  002594                  runCurrentUpdate := TRUE;
007985  002595                  currentForm := FORM_11_CURRENT_RESULTS;
007986  002596                  gotoCurrentForm(0);
007987  002597                  displayCurrentTemp();
007988  002598                  else if (currentForm == FORM_11_CURRENT_RESULTS)
007989  002599                  runCurrentUpdate := TRUE;
007990  002600        
007991  002601                  endif
007992  002602          break;
007993  002603          case TREATMENT_CLEAR:
007994  002604              runCurrentUpdate := FALSE;
007995  002605              if(PrevFormErrorIdenification != FORM_2_WELCOME_SCREEN)
007996  002606                  currentForm := PrevFormErrorIdenification;
007997  002607                  gotoCurrentForm(0);
007998  002608                else if(currentForm == FORM_18_TREATMENT_RESULTS)
007999  002609                  //Do nothing
008000  002610        
008001  002611              else
008002  002612                   currentForm := FORM_2_WELCOME_SCREEN;
008003  002613                   gotoCurrentForm(0);
008004  002614                  endif
008005  002615                break;
008006  002616       endswitch
008007  002617        
008008  002618  endfunc
008009  002619        
008010  002620        
008011  002621  //////////////////////////////////////////////////////////////////Serial Functions //////////////////////////////////////////////////////////////
008012  002622        
008013  002623  func init_Serial_Comm()
008014  002624      //receive communication from Arduino and respond with acknowledgement
008015  002625     while(serin()!= MSG_ACK)
008016  002626     wend
008017  002627    // print("message recieved, responding...","\n");
008018  002628     send_msg_rsvd();
008019  002629        
008020  002630  //Goto Welcome Screen
008021  002631    //  currentForm := FORM_2_WELCOME_SCREEN;
008022  002632    //  gotoCurrentForm(0);
008023  002633        
008024  002634        
008025  002635  endfunc
008026  002636        
008027  002637  //Sends the message recieved character out on Serial1
008028  002638  func send_msg_rsvd()
008029  002639        
008030  002640      serout(MSG_ACK);
008031  002641        
008032  002642  endfunc
008033  002643        
008034  002644        
008035  002645  //clear Serial1 RX Buffer
008036  002646  func clear_RX_Buffer()
008037  002647        
008038  002648      while(com_Count() > 0)
008039  002649          serin();
008040  002650      wend
008041  002651        
008042  002652  endfunc
008043  002653        
008044  002654  //Check for message from Arduino
008045  002655  func check_Incoming_Serial()
008046  002656      var signalChar;
008047  002657        
008048  002658      if(com_Count() > 0)
008049  002659        
008050  002660          signalChar := serin();
008051  002661        
008052  002662             //  print("geeting this signal");
008053  002663             // print(signalChar);
008054  002664             //  pause(1000);
008055  002665          if (currentForm != FORM_18_TREATMENT_RESULTS)
008056  002666        
008057  002667        
008058  002668        
008059  002669          switch (signalChar)
008060  002670        
008061  002671        
008062  002672        
008063  002673              case SETUP_MESSAGE: //Setup message is used to send semi-permanent information from before the last power-down
008064  002674                  read_Setup_Message();
008065  002675              break;
008066  002676        
008067  002677              case CELL_STRENGTH_MESSAGE: //Setup message is used to send semi-permanent information from before the last power-down
008068  002678                  read_cell_establishment();
008069  002679              break;
008070  002680        
008071  002681        
008072  002682              case CELL_VERSION_MESSAGE:
008073  002683                 recieve_Cell_Version_Message();
008074  002684              break;
008075  002685        
008076  002686              case ARDUINO_VERSION_MESSAGE:
008077  002687                 recieve_Arduino_Version_Message();
008078  002688              break;
008079  002689        
008080  002690        
008081  002691              case BOOT_ERROR_MSG: //Getting boot Error message if it exisits
008082  002692                  read_Cell_Boot_Message();
008083  002693              break;
008084  002694        
008085  002695              case MSG_ACK: //Arduino is requesting message acknowledged. Reply with '!'
008086  002696              send_msg_rsvd();
008087  002697              break;
008088  002698        
008089  002699              /////Added to func check_Incoming_Serial()
008090  002700        
008091  002701              case TREATMENT_UPDATE_MESSAGE: //Arduino is requesting message acknowledged. Reply with '!'
008092  002702              read_Treatment_Update_Message();
008093  002703              break;
008094  002704        
008095  002705        
008096  002706              case SCREEN_STATUS_COMPLETE: //Arduino is requesting message acknowledged. Reply with '!'
008097  002707              treatment_Stopped_Arduino();
008098  002708              break;
008099  002709        
008100  002710              case SCREEN_COOLDOWN: //Arduino is requesting message acknowledged. Reply with '!'
008101  002711              displayCoolDown();
008102  002712              break;
008103  002713        
008104  002714              case UPDATE_CELL_STRENGTH:
008105  002715                 read_Cell_Message_Strength();
008106  002716              break;
008107  002717        
008108  002718              case INITATE_PROBE:
008109  002719                  iniate_Probe_Connection();
008110  002720              break;
008111  002721        
008112  002722        
008113  002723          default:
008114  002724              //If serial in isn't recgonized
008115  002725          break;
008116  002726          endswitch
008117  002727        
008118  002728          endif
008119  002729      endif
008120  002730  endfunc
008121  002731        
008122  002732  func time_iterator_for_serin(var message_length)
008123  002733         var timeIterator := 0;
008124  002734        
008125  002735          while  ((com_Count() < message_length) && ((timeIterator*SERIAL_TIMEOUT_ITERATOR)<SERIAL_TIMEOUT))
008126  002736               timeIterator++;
008127  002737               pause(SERIAL_TIMEOUT_ITERATOR);
008128  002738          wend
008129  002739        
008130  002740          if (com_Count() < message_length)
008131  002741            return FALSE;
008132  002742          else
008133  002743           return TRUE;
008134  002744          endif
008135  002745  endfunc
008136  002746        
008137  002747  func init_Setup_Parameters()   //Wait for arduino to send setupinformation and then reads the information
008138  002748        
008139  002749      pause(3000);
008140  002750      check_Incoming_Serial();
008141  002751        
008142  002752  endfunc
008143  002753        
008144  002754  //receive treatment setup information from Arduino
008145  002755  func read_Setup_Message()
008146  002756        
008147  002765  */
008148  002766        
008149  002767         if (time_iterator_for_serin(SETUP_MESSAGE_LENGTH) == TRUE)
008150  002768        
008151  002769              cellOnBoard := serin();
008152  002770              tTemp := serin();
008153  002771              mAirTemp := serin();
008154  002772              tAtTarget := serin();
008155  002773              cellPin[0] := serin();
008156  002774              cellPin[1] := serin();
008157  002775              cellPin[2] := serin();
008158  002776              cellPin[3] := serin();
008159  002777              cellPin[4] := serin();
008160  002778        
008161  002779              send_msg_rsvd();
008162  002780             // print_Setup_Message();
008163  002781        
008164  002782          endif
008165  002783        
008166  002784  endfunc
008167  002785        
008168  002786  func establishingConnectionReconnectEnabled()
008169  002787        
008170  002788       establishingConnection_choice := TRUE;
008171  002789     if(cellSignalStrength == FALSE)
008172  002790          return FORM_22_ESTABLISHING_CONNECTION;
008173  002791      else if (cellSignalStrength > 0)
008174  002792           return FORM_7_CURRENT_PIN;
008175  002793      endif
008176  002794        
008177  002795  endfunc
008178  002796        
008179  002797  func iniate_Probe_Connection()
008180  002798        
008181  002799     var iniate_probe_message_length := 1;
008182  002800     if(time_iterator_for_serin(iniate_probe_message_length) == TRUE)
008183  002801        
008184  002802         probe_idenification_number := serin();
008185  002803        
008186  002804             switch(probe_idenification_number)
008187  002805        
008188  002806              case PROBE_AIR_TEMP:
008189  002807                   currentForm := FORM_24_IDENTIFYING_PROBES;
008190  002808                   gotoCurrentForm(0);
008191  002809              break;
008192  002810              case PROBE_01:
008193  002811                   currentForm := FORM_24_IDENTIFYING_PROBES;
008194  002812                   gotoCurrentForm(0);
008195  002813              break;
008196  002814        
008197  002815              case PROBE_02:
008198  002816                   currentForm := FORM_24_IDENTIFYING_PROBES;
008199  002817                   gotoCurrentForm(0);
008200  002818              break;
008201  002819        
008202  002820              case PROBE_03:
008203  002821                   currentForm := FORM_24_IDENTIFYING_PROBES;
008204  002822                   gotoCurrentForm(0);
008205  002823              break;
008206  002824        
008207  002825              case PROBE_SUCCESSFULLY_IDENTIFIED:
008208  002826                   currentForm := FORM_25_PROBE_IDENTIFICATION_COMPLETE;
008209  002827                   gotoCurrentForm(0);
008210  002828        
008211  002829              break;
008212  002830              case PROBE_UNSUCCESSFULLY_IDENTIFIED:
008213  002831                   currentForm := FORM_25_PROBE_IDENTIFICATION_COMPLETE;
008214  002832                   gotoCurrentForm(0);
008215  002833              break;
008216  002834              case PROBE_INITIATION_COMPLETE:
008217  002835                  currentForm := FORM_25_PROBE_IDENTIFICATION_COMPLETE;
008218  002836                   gotoCurrentForm(0);
008219  002837              break;
008220  002838                  default:
008221  002839                     //recieved incomplete data information
008222  002840              break;
008223  002841        
008224  002842          endswitch
008225  002843      endif
008226  002844  endfunc
008227  002845        
008228  002846  func start_Probe_Intiation()
008229  002847       serout(INITATE_PROBE);
008230  002848       img_Show(hndl,iLoadingBG) ;  //place holder image while attempting to get cell strength
008231  002849       img_Show(hndl,iLoadingText) ;
008232  002850  endfunc
008233  002851        
008234  002852  func start_Probe_Reintiation()
008235  002853       serout(REINITATE_PROBE_IDENTIFICATION);
008236  002854       img_Show(hndl,iLoadingBG) ;  //place holder image while attempting to get cell strength
008237  002855       img_Show(hndl,iLoadingText) ;
008238  002856  endfunc
008239  002857        
008240  002858  func send_log_files()
008241  002859       serout(SEND_LOG_FILES);
008242  002860       img_Show(hndl,iLoadingBG) ;  //place holder image while attempting to get cell strength
008243  002861       img_Show(hndl,iLoadingText) ;
008244  002862       currentForm := FORM_21_UTILITIES;
008245  002863       gotoCurrentForm(0);
008246  002864        
008247  002865  endfunc
008248  002866        
008249  002867  func read_Cell_Message_Strength()
008250  002868     if(time_iterator_for_serin(CELL_STRENGTH_MESSAGE_LENGTH)== FALSE)
008251  002869           return FALSE;
008252  002870      else if (time_iterator_for_serin(CELL_STRENGTH_MESSAGE_LENGTH)== TRUE)
008253  002871              while (serin()== TREATMENT_UPDATE_MESSAGE)
008254  002872               serout(UPDATE_CELL_STRENGTH);
008255  002873              //    print("sending cell update Message");
008256  002874              wend
008257  002875        
008258  002876              cellSignalStrength := serin();
008259  002877        
008260  002878              if (cellSignalStrength == UPDATE_CELL_STRENGTH)
008261  002879                  cellSignalStrength := serin();
008262  002880              endif
008263  002881              if (cellSignalStrength > 0 && cellSignalStrength < 5)
008264  002882                  return cellSignalStrength;
008265  002883              else
008266  002884                  return FALSE;
008267  002885              endif
008268  002886          return FALSE;
008269  002887      endif
008270  002888        
008271  002889  endfunc
008272  002890        
008273  002891  func read_Cell_Strength_Message()
008274  002892        
008275  002893        
008276  002894          if(time_iterator_for_serin(CELL_STRENGTH_MESSAGE_LENGTH) == FALSE)
008277  002895               return FALSE;
008278  002896        
008279  002897          else if(time_iterator_for_serin(CELL_STRENGTH_MESSAGE_LENGTH) == TRUE)
008280  002898        
008281  002899              cellSignalStrength := serin();
008282  002900              if (cellSignalStrength == CELL_STRENGTH_MESSAGE)
008283  002901              cellSignalStrength := serin();
008284  002902              endif
008285  002903        
008286  002904             // pause(1000);
008287  002905              if (cellSignalStrength > 0 && cellSignalStrength < 5)
008288  002906                  return TRUE;
008289  002907              else
008290  002908                  return FALSE;
008291  002909          endif
008292  002910        
008293  002911      endif
008294  002912  endfunc
008295  002913        
008296  002914  func read_cell_establishment()
008297  002915            //  print(cellSignalStrength);
008298  002916            //  print("\n");
008299  002917            //  print(currentForm);
008300  002918        
008301  002919       read_Cell_Strength_Message();
008302  002920              if (cellSignalStrength > 0)
008303  002921                if (currentForm == FORM_2_WELCOME_SCREEN || currentForm == FORM_3_CIRCUITS || currentForm == FORM_4_BREAKERS || currentForm == FORM_5_TEMP_SETTINGS || currentForm == FORM_6_ENABLE_CELL || currentForm == FORM_21_UTILITIES || currentForm == FORM_26_REIDENTIFY_PROBES)
008304  002922                      pause(500);
008305  002923                      conectionHasHappened := TRUE;
008306  002924                  else if (currentForm == FORM_11_CURRENT_RESULTS)
008307  002925                         pause(500);
008308  002926                         conectionHasHappened := TRUE;
008309  002927                  else if (currentForm == FORM_22_ESTABLISHING_CONNECTION && cellMonitoring != FALSE)
008310  002928                     // print("if statement 2");
008311  002929                      currentForm := FORM_6_ENABLE_CELL;
008312  002930                      gotoCurrentForm(0);
008313  002931                 else if (currentForm == FORM_23_UNABLE_TO_CONNECT_NETWORK && cellMonitoring != FALSE && cellSignalStrength >0 )
008314  002932                     // print("if statement 3");
008315  002933                      pause(500);
008316  002934                       currentForm := FORM_6_ENABLE_CELL;
008317  002935                      gotoCurrentForm(0);
008318  002936                  else if (currentForm == FORM_23_UNABLE_TO_CONNECT_NETWORK && cellMonitoring != FALSE && cellSignalStrength == 0)
008319  002937                     //   print("if statement 4");
008320  002938                        pause(500);
008321  002939                        currentForm := FORM_23_UNABLE_TO_CONNECT_NETWORK;
008322  002940                        gotoCurrentForm(0);
008323  002941                 // else
008324  002942                    //  print("else  statement");
008325  002943                    //  pause(500);
008326  002944                    //  currentForm := FORM_6_ENABLE_CELL;
008327  002945                    //  gotoCurrentForm(0);
008328  002946                  endif
008329  002947              else if (cellSignalStrength <= 0 && currentForm == FORM_21_UTILITIES)
008330  002948                   if (cellSignalStrength < 0)
008331  002949                      cellSignalStrength := 0;
008332  002950                  endif
008333  002951        
008334  002952          endif
008335  002953      //  print("end of if statement");
008336  002954  endfunc
008337  002955        
008338  002956        
008339  002957        
008340  002958  func read_Cell_Boot_Message()
008341  002959        
008342  002960        var Boot_Message_Length := 1;
008343  002961        
008344  002962         if(time_iterator_for_serin(Boot_Message_Length) == TRUE)
008345  002963              bootMessage := serin();
008346  002964          //  print(bootMessage);
008347  002965          if (bootMessage == CELL_BOOT_ERROR_COMM && cellMonitoring != FALSE)
008348  002966           //   print("cell_boot_error_com");
008349  002967                  cellConnectionMsg := CELL_BOOT_ERROR_COMM;
008350  002968                  currentForm := FORM_9_UNABLE_TO_CONNECT_MODEM;
008351  002969                  gotoCurrentForm(0);
008352  002970          else if(bootMessage == CELL_BOOT_ERROR_NETWORK && cellMonitoring != FALSE)
008353  002971           //    print("cell_boot_error_network");
008354  002972                  cellConnectionMsg :=  CELL_BOOT_ERROR_NETWORK;
008355  002973                  currentForm := FORM_23_UNABLE_TO_CONNECT_NETWORK;
008356  002974                  gotoCurrentForm(0);
008357  002975          endif
008358  002976        endif
008359  002977  endfunc
008360  002978        
008361  002979        
008362  002980        
008363  002981  func print_Setup_Message()
008364  002982        
008365  002983       print("cellOnBoard:",cellOnBoard,"\n");
008366  002984       print("tTemp:",tTemp,"\n");
008367  002985       print("mAirTemp:",mAirTemp,"\n");
008368  002986       print("tAtTarget:",tAtTarget,"\n");
008369  002987       print("Cell Pin:",cellPin[0],cellPin[1],cellPin[2],cellPin[3],cellPin[4],"\n");
008370  002988        
008371  002989        
008372  002990  endfunc
008373  002991        
008374  002992  func request_Cell_Strength()
008375  002993     com_TXbufferHold(ON);  //assembles the packet in the buffer before sending
008376  002994      serout(UPDATE_CELL_STRENGTH);
008377  002995      com_TXbufferHold(OFF);   //changed from off to on
008378  002996      return read_Cell_Message_Strength();//reads the response (if any) from the arduino
008379  002997      //com_TXbufferHold(OFF);  //added to function
008380  002998  endfunc
008381  002999        
008382  003000        
008383  003001        
008384  003002  func request_Cell_Strength_Exist()
008385  003003    //  print("request_Cell_Strength_exist");
008386  003004     // print (read_Cell_Strength_Message());
008387  003005      //request an updated cell strength
008388  003006    //  img_Show(hndl,iLoadingBG) ;  //place holder image while attempting to get cell strength
008389  003007      //img_Show(hndl,icellSearchText) ;
008390  003008        
008391  003009      com_TXbufferHold(ON);  //assembles the packet in the buffer before sending
008392  003010      serout(CELL_STRENGTH_MESSAGE);
008393  003011      com_TXbufferHold(OFF);
008394  003012      return read_Cell_Strength_Message();  //reads the response (if any) from the arduino
008395  003013        
008396  003014  endfunc
008397  003015        
008398  003016  func begin_Treatment()
008399  003017        
008400  003029  */
008401  003030        
008402  003031     // print("Beginning Treatment... \n");
008403  003032      com_TXbufferHold(ON);  //assembles the packet in the buffer before sending
008404  003033      serout(BEGIN_TREATMENT_MESSAGE);
008405  003034      serout(tTemp);
008406  003035      serout(mAirTemp);
008407  003036      serout(tAtTarget);
008408  003037      serout(cellPin[0]);serout(cellPin[1]);serout(cellPin[2]);serout(cellPin[3]);serout(cellPin[4]); //Cell Pin Here
008409  003038      serout(nCircuits);
008410  003039      serout(cBreakers);
008411  003040      serout(cellEnabled);
008412  003041      com_TXbufferHold(OFF);
008413  003042       currentForm := 11;
008414  003043      gotoCurrentForm(0);
008415  003044  endfunc
008416  003045        
008417  003046  ///////////Cell Functions//////////////////////////////
008418  003047        
008419  003048  func read_Cell_Version()
008420  003049      com_TXbufferHold(ON);  //assembles the packet in the buffer before sending
008421  003050      serout(CELL_VERSION_MESSAGE);
008422  003051      com_TXbufferHold(OFF);   //changed from off to on
008423  003052      recieve_Cell_Version_Message();//reads the response (if any) from the arduino
008424  003053      //com_TXbufferHold(OFF);  //added to function
008425  003054  endfunc
008426  003055        
008427  003056  func recieve_Cell_Version_Message()
008428  003057        
008429  003058     if (time_iterator_for_serin(CHECK_VERSION_MESSAGE_LENGTH) == TRUE)
008430  003059          VERSION_CELL_MAJOR := serin();
008431  003060          VERSION_CELL_MINOR := serin();
008432  003061          VERSION_CELL_PATCH := serin();
008433  003062          if (currentForm == FORM_21_UTILITIES)
008434  003063               utilitiesFormReset();
008435  003064          endif
008436  003065        
008437  003066      else if (time_iterator_for_serin(CHECK_VERSION_MESSAGE_LENGTH) == FALSE)
008438  003067           VERSION_CELL_MAJOR := 0;
008439  003068           VERSION_CELL_MINOR := 0;
008440  003069           VERSION_CELL_PATCH := 0;
008441  003070          if (currentForm == FORM_21_UTILITIES)
008442  003071               utilitiesFormReset();
008443  003072          endif
008444  003073      endif
008445  003074  endfunc
008446  003075        
008447  003076  func read_Arduino_Version()
008448  003077      com_TXbufferHold(ON);  //assembles the packet in the buffer before sending
008449  003078      serout(ARDUINO_VERSION_MESSAGE);
008450  003079      com_TXbufferHold(OFF);   //changed from off to on
008451  003080      recieve_Arduino_Version_Message();//reads the response (if any) from the arduino
008452  003081      //com_TXbufferHold(OFF);  //added to function
008453  003082  endfunc
008454  003083        
008455  003084  func recieve_Arduino_Version_Message()
008456  003085        
008457  003086        var arduino_version_message_length := 3;
008458  003087       if(time_iterator_for_serin(arduino_version_message_length) == TRUE)
008459  003088        
008460  003089      //    print("Arduino version in is: ");
008461  003090          VERSION_ARDUINO_MAJOR := serin();
008462  003091          VERSION_ARDUINO_MAJOR := VERSION_ARDUINO_MAJOR - '0';   ////reads to screen in ascii and needs to be changed to an int
008463  003092       //   print(VERSION_ARDUINO_MAJOR);
008464  003093          VERSION_ARDUINO_MINOR := serin();
008465  003094          VERSION_ARDUINO_MINOR := VERSION_ARDUINO_MINOR - '0';   ////reads to screen in ascii and needs to be changed to an int
008466  003095        //  print(VERSION_ARDUINO_MINOR);
008467  003096          VERSION_ARDUINO_PATCH := serin();
008468  003097          VERSION_ARDUINO_PATCH := VERSION_ARDUINO_PATCH - '0';   ////reads to screen in ascii and needs to be changed to an int
008469  003098       //   print(VERSION_ARDUINO_PATCH);
008470  003099      if (currentForm == FORM_21_UTILITIES)
008471  003100           utilitiesFormReset();
008472  003101      endif
008473  003102        
008474  003103        else if(time_iterator_for_serin(arduino_version_message_length) == FALSE)
008475  003104          VERSION_ARDUINO_MAJOR := 0;
008476  003105          VERSION_ARDUINO_MINOR := 0;
008477  003106          VERSION_ARDUINO_PATCH := 0;
008478  003107      if (currentForm == FORM_21_UTILITIES)
008479  003108           utilitiesFormReset();
008480  003109      endif
008481  003110    endif
008482  003111        
008483  003112        
008484  003113  endfunc
008485  003114        
008486  003115        
008487  003116        
008488  003117  func checkCellPin()
008489  003118       var getSerinCellInput := -2;
008490  003119    //  print("Sending Pin \n");
008491  003120      var timeIterator := 0;
008492  003121        
008493  003122      clear_RX_Buffer();
008494  003123     com_TXbufferHold(ON); //assembles the packet in the buffer before sending
008495  003124     serout(CHECK_PIN_MESSAGE);
008496  003125     serout(cellPin[0]);
008497  003126     serout(cellPin[1]);
008498  003127     serout(cellPin[2]);
008499  003128     serout(cellPin[3]);
008500  003129     serout(cellPin[4]);
008501  003130     com_TXbufferHold(OFF);
008502  003131        
008503  003132         img_Show(hndl,iLoadingBG) ;
008504  003133         img_Show(hndl,ivalidatePinText) ;
008505  003134        
008506  003135      while  ((com_Count() < CHECK_PIN_MESSAGE_LENGTH)&& ((timeIterator*SERIAL_TIMEOUT_ITERATOR)<SERIAL_TIMEOUT)) //
008507  003136           timeIterator++;
008508  003137           pause(SERIAL_TIMEOUT_ITERATOR);
008509  003138      wend
008510  003139        
008511  003140      if (serin() == CHECK_PIN_MESSAGE)
008512  003141       //   print("serin in is: ");
008513  003142        
008514  003143          getSerinCellInput := serin();
008515  003144        
008516  003145        //  print(getSerinCellInput);
008517  003146          pause(5000);
008518  003147          if(getSerinCellInput == TRUE)
008519  003148          //    print("pin valid");
008520  003149              cellEnabled := TRUE;  //if the pin is valid, then the cell minitoring is enabled
008521  003150              return TRUE;
008522  003151          else if(getSerinCellInput == CELL_TIMED_OUT)
008523  003152           //   print("lost connection");
008524  003153              cellEnabled := CELL_TIMED_OUT;  //if the pin is valid, then the cell minitoring is enabled
008525  003154              return CELL_TIMED_OUT;
008526  003155          else if(getSerinCellInput == FALSE)
008527  003156            //  print("pin Invalid");
008528  003157              cellEnabled := FALSE;  //if the pin is not valid, then the cell monitoring is disabled unless a valid pin is given in the future
008529  003158              return FALSE;
008530  003159          else
008531  003160            //  print("wrong input error");
008532  003161              cellEnabled := PIN_VALIDATION_ERROR;  //if the pin is not valid, then the cell monitoring is disabled unless a valid pin is given in the future
008533  003162              pause(3000);
008534  003163              return -1;
008535  003164          endif
008536  003165      endif
008537  003166      return PIN_VALIDATION_ERROR;
008538  003167        
008539  003168  endfunc
008540  003169        
008541  003170  func flush_Serial1()
008542  003171         while (1 > 0)
008543  003172         wend
008544  003173  endfunc
008545  003174        
008546  003175        
008547  003176        
008548  003177  func emergencyStop()
008549  003178        
008550  003179      //sends emergency stop message twice to arduino
008551  003180     // print("Sending Emergency Stop \n");
008552  003181      while (serin()!=MSG_ACK)
008553  003182         serout(EMERGENCY_STOP_MESSAGE);
008554  003183         pause(500);
008555  003184      wend
008556  003185          currentForm := FORM_20_EMERGENCY_SHUTDOWN;
008557  003186          gotoCurrentForm(0);
008558  003187          pause(4000);
008559  003188         currentForm := FORM_18_TREATMENT_RESULTS;
008560  003189         gotoCurrentForm(0);
008561  003190  endfunc
008562  003191        
008563  003192  func normalStop()
008564  003193        
008565  003194      //sends emergency stop message twice to arduino
008566  003195     // print("Sending Normal Stop \n");
008567  003196      while (serin()!=MSG_ACK)
008568  003197         serout(NORMAL_STOP_MESSAGE);
008569  003198         pause(500);
008570  003199      wend
008571  003200        
008572  003201  endfunc
008573  003202  ///////////
008574  003203        
008575  003204        
008576  003205        
008577  003206  ///////////
008578  003207        
008579  003208  func read_Treatment_Update_Message()
008580  003209        
008581  003210          if (time_iterator_for_serin(TREATMENT_UPDATE_MESSAGE_LENGTH) == TRUE)
008582  003211        
008583  003212            // print("getting treatment update")
008584  003213              TEMP_ARRAY[0] := serin();
008585  003214              TEMP_ARRAY[1] := serin();
008586  003215              TEMP_ARRAY[2] := serin();
008587  003216              TEMP_ARRAY[3] := serin();
008588  003217              TimeElapsedHrs := serin();
008589  003218              TimeElapsedMin := serin();
008590  003219              etaHrs := serin();
008591  003220              etaMin := serin();
008592  003221              treatmentStatus := serin();
008593  003222        
008594  003223               if(treatmentStatus != statusErrors)
008595  003224                 treatmentErrors(treatmentStatus);
008596  003225                endif
008597  003226                  send_msg_rsvd();
008598  003227        
008599  003228              if(runCurrentUpdate == TRUE)
008600  003229                  displayCurrentTemp();
008601  003230              endif
008602  003231        
008603  003232              else if (time_iterator_for_serin(TREATMENT_UPDATE_MESSAGE_LENGTH) == FALSE)
008604  003233             //does nothing because it isnt getting currect update information
008605  003234        
008606  003235          endif
008607  003236        
008608  003237  endfunc
008609  003238        
008610  003239        
008611  003240        
008612  003255  */
008613  003256        
Notice: no execution path to func 'flush_Serial1'
Notice: no execution path to func 'read_Arduino_Version'
Notice: no execution path to func 'read_Cell_Version'
Notice: no execution path to func 'print_Setup_Message'
Notice: no execution path to func 'init_Setup_Parameters'
Notice: no execution path to func 'btnState'
Notice: function argument 'option' in func 'gotoCurrentForm' is never used (line 1121 file:TouchScreen 5-4-16.4dg)
Notice: local var 'combuf' in func 'main' is never used (line 233 file:TouchScreen 5-4-16.4dg)
Notice: no execution path to func 'PrintDiskUnicode'
Notice: no execution path to func 'PrintDisk'


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
ARDUINO_RESET_CONFIRM                 89  0x00000059 (const dword)  (not used)
ARDUINO_RESET_INIT                    82  0x00000052 (const dword)  (not used)
ARDUINO_VERSION_MESSAGE               65  0x00000041 (const dword)  (usage 5)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
backBtn                             5499  0x0000157b (User func) args[1] r=0  (usage 12)
backBtnArray                         266  0x0000010a (mem) word[6] (global)  (usage 6)
backBtnSrc                           204  0x000000cc (mem) word (global)Notice: global var 'backBtnSrc' is never used
  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (usage 3)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
begin_Treatment                     1368  0x00000558 (User func) args[0] r=0  (usage 3)
BEGIN_TREATMENT_MESSAGE               88  0x00000058 (const dword)  (usage 3)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 18)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOOT_ERROR_MSG                        66  0x00000042 (const dword)  (usage 3)
bootMessage                          290  0x00000122 (mem) word (global)  (usage 10)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BREAKERS_15                           15  0x0000000f (const dword)  (usage 3)
BREAKERS_20                           20  0x00000014 (const dword)  (usage 3)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BtnNumber                           3698  0x00000e72 (User func) args[1] r=0  (usage 18)
btnPress                            5700  0x00001644 (User func) args[1] r=0  (usage 6)
btnPressAndRelease                  5725  0x0000165d (User func) args[1] r=0  (usage 99)
btnPressReset                       5636  0x00001604 (User func) args[1] r=0  (usage 51)
btnState                          UNRESOLVED (User func) args[1] r=0  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
C:\Users\tlars\Documents\4d-systems-35dt\TouchScreen 5-4-16\TouchScreen 5-4-16.4dg    2805  0x00000af5 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cBreakers                            224  0x000000e0 (mem) word (global)  (usage 19)
CELL_BOOT_ERROR_COMM                   2  0x00000002 (const dword)  (usage 6)
CELL_BOOT_ERROR_NETWORK                3  0x00000003 (const dword)  (usage 6)
CELL_STRENGTH_MESSAGE                 67  0x00000043 (const dword)  (usage 9)
CELL_STRENGTH_MESSAGE_LENGTH           1  0x00000001 (const dword)  (usage 12)
CELL_STRENGTH_NONE                     0  0x00000000 (const dword)  (not used)
CELL_STRENGTH_UPPERBOUND               4  0x00000004 (const dword)  (not used)
CELL_TIMED_OUT                         3  0x00000003 (const dword)  (usage 12)
CELL_VERSION_MESSAGE                  86  0x00000056 (const dword)  (usage 5)
cellConnectionMsg                    292  0x00000124 (mem) word (global)  (usage 7)
cellEnabled                          234  0x000000ea (mem) word (global)  (usage 19)
cellEnableForm                       200  0x000000c8 (mem) word (global)  (usage 1)
cellMonitoring                       282  0x0000011a (mem) word (global)  (usage 55)
cellOnBoard                          232  0x000000e8 (mem) word (global)  (usage 18)
cellPin                              236  0x000000ec (mem) word[6] (global)  (usage 151)
cellSignalStrength                   248  0x000000f8 (mem) word (global)  (usage 97)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
check_Incoming_Serial               2643  0x00000a53 (User func) args[0] r=0  (usage 5)
CHECK_PIN_MESSAGE                     80  0x00000050 (const dword)  (usage 6)
CHECK_PIN_MESSAGE_LENGTH               1  0x00000001 (const dword)  (usage 3)
CHECK_VERSION_MESSAGE_LENGTH           3  0x00000003 (const dword)  (usage 6)
checkCellPin                         875  0x0000036b (User func) args[0] r=0  (usage 3)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CIRCUITS_2                             2  0x00000002 (const dword)  (usage 3)
CIRCUITS_3                             3  0x00000003 (const dword)  (usage 3)
clear_RX_Buffer                     2803  0x00000af3 (User func) args[0] r=0  (usage 3)
clearPin                            5750  0x00001676 (User func) args[0] r=0  (usage 6)
CLIPPING                              19  0x00000013 (const dword)  (not used)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (not used)
COM1                               63493  0x0000f805 (const dword)  (usage 3)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (usage 3)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (usage 3)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (usage 3)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (usage 3)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 15)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (usage 32)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
conectionHasHappened                 294  0x00000126 (mem) word (global)  (usage 25)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
currentForm                          198  0x000000c6 (mem) word (global)  (usage 328)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
displayCoolDown                     5323  0x000014cb (User func) args[0] r=0  (usage 3)
displayCurrentTemp                  4999  0x00001387 (User func) args[0] r=0  (usage 15)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
EMERGENCY_STOP_MESSAGE                69  0x00000045 (const dword)  (usage 3)
emergencyStop                        806  0x00000326 (User func) args[0] r=0  (usage 3)
ENABLE                                 1  0x00000001 (const dword)  (not used)
establishingConnection_choice        296  0x00000128 (mem) word (global)  (usage 10)
establishingConnectionReconnectEnabled    2445  0x0000098d (User func) args[0] r=0  (usage 3)
etaHrs                               254  0x000000fe (mem) word (global)  (usage 13)
etaMin                               256  0x00000100 (mem) word (global)  (usage 13)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE                                  0  0x00000000 (const dword)  (usage 168)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 2)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 2)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 6)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 3)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 4)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
flush_Serial1                     UNRESOLVED (User func) args[0] r=0  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FORM_10_START_TREATMENT               10  0x0000000a (const dword)  (usage 30)
FORM_11_CURRENT_RESULTS               11  0x0000000b (const dword)  (usage 45)
FORM_12_MENU                          12  0x0000000c (const dword)  (usage 12)
FORM_13_SELECTION_REMINDER            13  0x0000000d (const dword)  (usage 9)
FORM_14_INVALID_PIN                   14  0x0000000e (const dword)  (usage 15)
FORM_15_STOP_TREATMENT                15  0x0000000f (const dword)  (usage 15)
FORM_16_ERRORS                        16  0x00000010 (const dword)  (usage 6)
FORM_17_TREATMENT_SUCCESSFUL          17  0x00000011 (const dword)  (usage 9)
FORM_18_TREATMENT_RESULTS             18  0x00000012 (const dword)  (usage 33)
FORM_19_COUNTDOWN_TO_SHUT_OFF         19  0x00000013 (const dword)  (usage 18)
FORM_1_LOADING_SCREEN                  1  0x00000001 (const dword)  (usage 2)
FORM_20_EMERGENCY_SHUTDOWN            20  0x00000014 (const dword)  (usage 15)
FORM_21_UTILITIES                     21  0x00000015 (const dword)  (usage 54)
FORM_22_ESTABLISHING_CONNECTION       22  0x00000016 (const dword)  (usage 18)
FORM_23_UNABLE_TO_CONNECT_NETWORK      23  0x00000017 (const dword)  (usage 45)
FORM_24_IDENTIFYING_PROBES            24  0x00000018 (const dword)  (usage 21)
FORM_25_PROBE_IDENTIFICATION_COMPLETE      25  0x00000019 (const dword)  (usage 18)
FORM_26_REIDENTIFY_PROBES             26  0x0000001a (const dword)  (usage 15)
FORM_27_SEND_LOG_FILES                27  0x0000001b (const dword)  (usage 18)
FORM_28_NO_CELL_DURING_TREATMENT      28  0x0000001c (const dword)  (usage 9)
FORM_2_WELCOME_SCREEN                  2  0x00000002 (const dword)  (usage 32)
FORM_3_CIRCUITS                        3  0x00000003 (const dword)  (usage 29)
FORM_4_BREAKERS                        4  0x00000004 (const dword)  (usage 26)
FORM_5_TEMP_SETTINGS                   5  0x00000005 (const dword)  (usage 32)
FORM_6_ENABLE_CELL                     6  0x00000006 (const dword)  (usage 44)
FORM_7_CURRENT_PIN                     7  0x00000007 (const dword)  (usage 33)
FORM_8_MODIFY_PIN                      8  0x00000008 (const dword)  (usage 18)
FORM_9_UNABLE_TO_CONNECT_MODEM         9  0x00000009 (const dword)  (usage 15)
formReset                           4523  0x000011ab (User func) args[0] r=0  (usage 6)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
fwrdBtn                             5485  0x0000156d (User func) args[1] r=0  (usage 6)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
getImgIndex                        11687  0x00002da7 (User func) args[0] r=0  (usage 3)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (not used)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (not used)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 12)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (usage 36)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (not used)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (usage 36)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 21)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (not used)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (usage 3)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (usage 3)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
gotoCurrentForm                     5790  0x0000169e (User func) args[1] r=0  (usage 213)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 1807)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
HYPER                                  3  0x00000003 (const dword)  (not used)
i15ampsBtn                            18  0x00000012 (const ??? 0)  (usage 21)
i20ampsBtn                            19  0x00000013 (const ??? 0)  (usage 21)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
i2circuitsBtn                         13  0x0000000d (const ??? 0)  (usage 21)
i3circuitsBtn                         14  0x0000000e (const ??? 0)  (usage 21)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (not used)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (not used)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 270)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iaddBtn_maxAirTemp_tempSet            40  0x00000028 (const ??? 0)  (usage 18)
iaddBtn_targetTemp_tempSet            38  0x00000026 (const ??? 0)  (usage 18)
iaddBtn_timeAtTarget_tempSet          36  0x00000024 (const ??? 0)  (usage 18)
iAirTempProbe_Text                   240  0x000000f0 (const ??? 0)  (usage 3)
iampSelectText                       157  0x0000009d (const ??? 0)  (usage 6)
iAmpsTexts                            24  0x00000018 (const ??? 0)  (usage 3)
iArduinoMajorDecimalText             218  0x000000da (const ??? 0)  (usage 6)
iArduinoMinorDecimalText             212  0x000000d4 (const ??? 0)  (usage 6)
iArduinoMinorlDigit                  210  0x000000d2 (const ??? 0)  (usage 12)
iArduinoPatchDigit                   213  0x000000d5 (const ??? 0)  (usage 12)
iArduinoVersionMajorDigit            208  0x000000d0 (const ??? 0)  (usage 12)
iArduinoVersionText                  196  0x000000c4 (const ??? 0)  (usage 6)
iback_btn_utilites                   194  0x000000c2 (const ??? 0)  (usage 33)
ibackBtn__tempSet                     44  0x0000002c (const ??? 0)  (usage 18)
ibackBtn_amps                         20  0x00000014 (const ??? 0)  (usage 18)
ibackBtn_currentPin                   63  0x0000003f (const ??? 0)  (usage 18)
ibackBtn_currentResults              129  0x00000081 (const ??? 0)  (usage 21)
ibackBtn_enableCell                   33  0x00000021 (const ??? 0)  (usage 21)
ibackBtn_settPin                      87  0x00000057 (const ??? 0)  (usage 18)
ibackBtn_startTreatment              110  0x0000006e (const ??? 0)  (usage 18)
iblank01                               9  0x00000009 (const ??? 0)  (usage 9)
iblank02                              11  0x0000000b (const ??? 0)  (usage 9)
iblank03                              22  0x00000016 (const ??? 0)  (usage 9)
iblank04                              46  0x0000002e (const ??? 0)  (usage 9)
iblank05                              30  0x0000001e (const ??? 0)  (usage 9)
iblank12                             111  0x0000006f (const ??? 0)  (usage 9)
iblank_06                             65  0x00000041 (const ??? 0)  (usage 9)
iblank_07                             88  0x00000058 (const ??? 0)  (usage 9)
ibreakerMenuBtn                      154  0x0000009a (const ??? 0)  (usage 15)
iCellConnectionText                  224  0x000000e0 (const ??? 0)  (usage 3)
iCellMajorDecimalText                202  0x000000ca (const ??? 0)  (usage 3)
iCellMinorDecimalText                205  0x000000cd (const ??? 0)  (usage 3)
iCellMinorlDigit                     203  0x000000cb (const ??? 0)  (usage 6)
iCellPatchDigit                      206  0x000000ce (const ??? 0)  (usage 6)
icellSearchText                        3  0x00000003 (const ??? 0)  (not used)
iCellStrengthDigit                   198  0x000000c6 (const ??? 0)  (usage 12)
icellStrengthText                    193  0x000000c1 (const ??? 0)  (usage 6)
iCellVersionMajorDigit               200  0x000000c8 (const ??? 0)  (usage 6)
icellVersionText                     195  0x000000c3 (const ??? 0)  (usage 6)
icircuitMenuBtn                      155  0x0000009b (const ??? 0)  (usage 15)
icircuitsSelectText                  158  0x0000009e (const ??? 0)  (usage 6)
icircuitsTexts                        15  0x0000000f (const ??? 0)  (usage 3)
iclearBtn                             86  0x00000056 (const ??? 0)  (usage 15)
iconnectionBodyText                  229  0x000000e5 (const ??? 0)  (usage 3)
iConnectionTitle                     228  0x000000e4 (const ??? 0)  (usage 3)
icontactZBText                       105  0x00000069 (const ??? 0)  (usage 3)
iContWithoutCell_btn                 230  0x000000e6 (const ??? 0)  (usage 21)
iCoolDownText                        187  0x000000bb (const ??? 0)  (usage 3)
iCountDown_Digits                    185  0x000000b9 (const ??? 0)  (usage 9)
icreatePinBtn_currentPin              59  0x0000003b (const ??? 0)  (usage 30)
icurrentPinDigits_00                  61  0x0000003d (const ??? 0)  (usage 12)
icurrentPinDigits_01                  67  0x00000043 (const ??? 0)  (usage 12)
icurrentPinDigits_02                  69  0x00000045 (const ??? 0)  (usage 12)
icurrentPinDigits_03                  71  0x00000047 (const ??? 0)  (usage 12)
icurrentPinDigits_04                  73  0x00000049 (const ??? 0)  (usage 12)
icurrentResultsTitle                 146  0x00000092 (const ??? 0)  (usage 6)
ielapseTime_hours_digits_currentResults     133  0x00000085 (const ??? 0)  (usage 12)
ielapseTime_hr_text                  142  0x0000008e (const ??? 0)  (usage 12)
ielapseTime_min_text                 143  0x0000008f (const ??? 0)  (usage 12)
ielapseTime_mins_digits_currentResults     135  0x00000087 (const ??? 0)  (usage 12)
ielapseTimeText_currentResutls       125  0x0000007d (const ??? 0)  (usage 9)
iEmergencyShutOff_btn                184  0x000000b8 (const ??? 0)  (usage 18)
iEmergencyText                       191  0x000000bf (const ??? 0)  (usage 3)
ienableCellText                       32  0x00000020 (const ??? 0)  (usage 3)
ierror_01                            169  0x000000a9 (const ??? 0)  (usage 3)
iestTimeRemaining_currentResults     126  0x0000007e (const ??? 0)  (usage 6)
iestTimeRemaining_hrs_digits_currentResults     137  0x00000089 (const ??? 0)  (usage 3)
iestTimeRemaining_hrs_text           145  0x00000091 (const ??? 0)  (usage 3)
iestTimeRemaining_min_digits_currentResults     139  0x0000008b (const ??? 0)  (usage 3)
iestTimeRemaining_mins_text          144  0x00000090 (const ??? 0)  (usage 3)
iForm10                              107  0x0000006b (const ??? 0)  (usage 3)
iForm11                              114  0x00000072 (const ??? 0)  (usage 6)
iForm12                              151  0x00000097 (const ??? 0)  (usage 3)
iForm13                              156  0x0000009c (const ??? 0)  (usage 9)
iForm14                              159  0x0000009f (const ??? 0)  (usage 3)
iForm15                              164  0x000000a4 (const ??? 0)  (usage 3)
iForm16                              168  0x000000a8 (const ??? 0)  (usage 3)
iForm17                              177  0x000000b1 (const ??? 0)  (usage 3)
iForm18                              181  0x000000b5 (const ??? 0)  (usage 3)
iForm19                              183  0x000000b7 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                              190  0x000000be (const ??? 0)  (usage 3)
iForm21                              192  0x000000c0 (const ??? 0)  (usage 6)
iForm22                              227  0x000000e3 (const ??? 0)  (usage 3)
iForm23                              232  0x000000e8 (const ??? 0)  (usage 3)
iForm24                              238  0x000000ee (const ??? 0)  (usage 3)
iForm25                              245  0x000000f5 (const ??? 0)  (usage 3)
iForm26                              251  0x000000fb (const ??? 0)  (usage 3)
iForm27                              255  0x000000ff (const ??? 0)  (usage 3)
iForm28                              259  0x00000103 (const ??? 0)  (usage 3)
iForm3                                 8  0x00000008 (const ??? 0)  (usage 3)
iForm4                                17  0x00000011 (const ??? 0)  (usage 3)
iForm5                                34  0x00000022 (const ??? 0)  (usage 3)
iForm6                                26  0x0000001a (const ??? 0)  (usage 3)
iForm7                                58  0x0000003a (const ??? 0)  (usage 3)
iForm8                                75  0x0000004b (const ??? 0)  (usage 3)
iForm9                               101  0x00000065 (const ??? 0)  (usage 3)
iHeaderText_ModemCommincationError     103  0x00000067 (const ??? 0)  (usage 3)
iiArduinoMinorlDigit                 211  0x000000d3 (const ??? 0)  (not used)
iiArduinoPatchDigit                  214  0x000000d6 (const ??? 0)  (not used)
iiArduinoVersionMajorDigit           209  0x000000d1 (const ??? 0)  (not used)
iiCellMinorlDigit                    204  0x000000cc (const ??? 0)  (not used)
iiCellPatchDigit                     207  0x000000cf (const ??? 0)  (not used)
iiCellStrengthDigit                  199  0x000000c7 (const ??? 0)  (not used)
iiCellVersionMajorDigit              201  0x000000c9 (const ??? 0)  (not used)
iiCountDown_Digits                   186  0x000000ba (const ??? 0)  (not used)
iicurrentPinDigits_00                 62  0x0000003e (const ??? 0)  (not used)
iicurrentPinDigits_01                 68  0x00000044 (const ??? 0)  (not used)
iicurrentPinDigits_02                 70  0x00000046 (const ??? 0)  (not used)
iicurrentPinDigits_03                 72  0x00000048 (const ??? 0)  (not used)
iicurrentPinDigits_04                 74  0x0000004a (const ??? 0)  (not used)
iielapseTime_hours_digits_currentResults     134  0x00000086 (const ??? 0)  (not used)
iielapseTime_mins_digits_currentResults     136  0x00000088 (const ??? 0)  (not used)
iiestTimeRemaining_hrs_digits_currentResults     138  0x0000008a (const ??? 0)  (not used)
iiestTimeRemaining_min_digits_currentResults     140  0x0000008c (const ??? 0)  (not used)
iimaxAirTemp_digits_currentResults     128  0x00000080 (const ??? 0)  (not used)
iimaxAirTempDigits_tempSet            51  0x00000033 (const ??? 0)  (not used)
iinvalidPinText_body                 161  0x000000a1 (const ??? 0)  (usage 3)
iinvalidPinText_Header               160  0x000000a0 (const ??? 0)  (usage 3)
iiprobe1_digits_currentResults       116  0x00000074 (const ??? 0)  (not used)
iiprobe2_digits_currentResults       121  0x00000079 (const ??? 0)  (not used)
iiprobe3_digits_currentResults       123  0x0000007b (const ??? 0)  (not used)
iiScreenMinorlDigit                  220  0x000000dc (const ??? 0)  (not used)
iiScreenPatchDigit                   223  0x000000df (const ??? 0)  (not used)
iiScreenVersionMajorDigit            216  0x000000d8 (const ??? 0)  (not used)
iisetPinDigits_00                     92  0x0000005c (const ??? 0)  (not used)
iisetPinDigits_01                     94  0x0000005e (const ??? 0)  (not used)
iisetPinDigits_02                     96  0x00000060 (const ??? 0)  (not used)
iisetPinDigits_03                     98  0x00000062 (const ??? 0)  (not used)
iisetPinDigits_04                    100  0x00000064 (const ??? 0)  (not used)
iitargetTempDigits_tempSet            49  0x00000031 (const ??? 0)  (not used)
iitimeAtTargetDigits_tempSet          53  0x00000035 (const ??? 0)  (not used)
iLoadingBG                             0  0x00000000 (const ??? 0)  (usage 24)
iLoadingText                           1  0x00000001 (const ??? 0)  (usage 21)
iLog_No_btn                          258  0x00000102 (const ??? 0)  (usage 21)
iLog_Title                           256  0x00000100 (const ??? 0)  (usage 3)
iLog_Yes_Btn                         257  0x00000101 (const ??? 0)  (usage 21)
iLogButton                           226  0x000000e2 (const ??? 0)  (usage 33)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 267)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (not used)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
imaxAirTemp_digits_currentResults     127  0x0000007f (const ??? 0)  (usage 18)
imaxAirTempDigits_tempSet             50  0x00000032 (const ??? 0)  (usage 18)
iMaxAirTempF_text                    150  0x00000096 (const ??? 0)  (usage 9)
imaxAirTempF_text_tempSet             56  0x00000038 (const ??? 0)  (usage 3)
imaxAirTempText_currentResutls       124  0x0000007c (const ??? 0)  (usage 9)
imaxAirTempText_tempSet               42  0x0000002a (const ??? 0)  (usage 3)
imenuBtn__tempSet                     45  0x0000002d (const ??? 0)  (usage 18)
imenuBtn_amps                         21  0x00000015 (const ??? 0)  (usage 18)
imenuBtn_circuits                     10  0x0000000a (const ??? 0)  (usage 21)
imenuBtn_currentPin                   64  0x00000040 (const ??? 0)  (usage 15)
imenuBtn_currentResults              130  0x00000082 (const ??? 0)  (usage 27)
imenuBtn_enableCell                   29  0x0000001d (const ??? 0)  (usage 18)
imenuBtn_settPin                      89  0x00000059 (const ??? 0)  (usage 15)
imenuBtn_startTreatment              112  0x00000070 (const ??? 0)  (usage 15)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 270)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (not used)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (not used)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (not used)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 270)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 1023)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 237)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
iminusBtn_maxAirTemp_tempSet          37  0x00000025 (const ??? 0)  (usage 18)
iminusBtn_targetTemp_tempSet          35  0x00000023 (const ??? 0)  (usage 18)
iminusBtn_timeAtTarget_tempSet        39  0x00000027 (const ??? 0)  (usage 18)
imodemContWithoutCellText            106  0x0000006a (const ??? 0)  (usage 3)
ina_estTime                          141  0x0000008d (const ??? 0)  (usage 6)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
iNetworkConnectionError_header       233  0x000000e9 (const ??? 0)  (usage 3)
inext_btn_utilities                  225  0x000000e1 (const ??? 0)  (usage 33)
inextBtn__tempSet                     47  0x0000002f (const ??? 0)  (usage 18)
inextBtn_amps                         23  0x00000017 (const ??? 0)  (usage 21)
inextBtn_circuits                     12  0x0000000c (const ??? 0)  (usage 21)
inextBtn_currentPin                   66  0x00000042 (const ??? 0)  (usage 15)
inextBtn_currentResults              132  0x00000084 (const ??? 0)  (usage 21)
inextBtn_enableCell                   31  0x0000001f (const ??? 0)  (usage 15)
inextBtn_settPin                      90  0x0000005a (const ??? 0)  (usage 18)
inextBtn_startTreatment              113  0x00000071 (const ??? 0)  (usage 15)
iniate_Probe_Connection             2267  0x000008db (User func) args[0] r=0  (usage 3)
init_Serial_Comm                    2833  0x00000b11 (User func) args[0] r=0  (usage 3)
init_Setup_Parameters             UNRESOLVED (User func) args[0] r=0  (not used)
INITATE_PROBE                         73  0x00000049 (const dword)  (usage 6)
inoBtn_enableCell                     28  0x0000001c (const ??? 0)  (usage 24)
inoBtn_InvalidPin                    163  0x000000a3 (const ??? 0)  (usage 27)
inoBtn_stopTreatment                 167  0x000000a7 (const ??? 0)  (usage 21)
inoCellBtn_ModemCommunicationError     102  0x00000066 (const ??? 0)  (usage 18)
inoCellBtn_NetworkCommunicationError     236  0x000000ec (const ??? 0)  (usage 21)
iNoCellTitle                         260  0x00000104 (const ??? 0)  (usage 3)
INVERSE                               64  0x00000040 (const dword)  (not used)
ipinBtn_0                             85  0x00000055 (const ??? 0)  (usage 15)
ipinBtn_1                             76  0x0000004c (const ??? 0)  (usage 15)
ipinBtn_2                             77  0x0000004d (const ??? 0)  (usage 15)
ipinBtn_3                             78  0x0000004e (const ??? 0)  (usage 15)
ipinBtn_4                             79  0x0000004f (const ??? 0)  (usage 15)
ipinBtn_5                             80  0x00000050 (const ??? 0)  (usage 15)
ipinBtn_6                             81  0x00000051 (const ??? 0)  (usage 15)
ipinBtn_7                             82  0x00000052 (const ??? 0)  (usage 15)
ipinBtn_8                             83  0x00000053 (const ??? 0)  (usage 15)
ipinBtn_9                             84  0x00000054 (const ??? 0)  (usage 15)
iPleaseCyclePowerText                104  0x00000068 (const ??? 0)  (usage 3)
ipoorSignalText                      234  0x000000ea (const ??? 0)  (usage 3)
iPowerError_cord2_text               170  0x000000aa (const ??? 0)  (usage 3)
iPowerError_cord3_text               171  0x000000ab (const ??? 0)  (usage 3)
iPowerError_cord4_text               172  0x000000ac (const ??? 0)  (usage 3)
iprobe1_digits_currentResults        115  0x00000073 (const ??? 0)  (usage 18)
iProbe1_Text                         242  0x000000f2 (const ??? 0)  (usage 3)
iprobe1F_text                        147  0x00000093 (const ??? 0)  (usage 9)
iprobe1Text_currentResults           117  0x00000075 (const ??? 0)  (usage 9)
iprobe2_digits_currentResults        120  0x00000078 (const ??? 0)  (usage 18)
iProbe2_Text                         243  0x000000f3 (const ??? 0)  (usage 3)
iprobe2F_text                        148  0x00000094 (const ??? 0)  (usage 9)
iprobe2Text_currentResults           118  0x00000076 (const ??? 0)  (usage 9)
iprobe3_digits_currentResults        122  0x0000007a (const ??? 0)  (usage 18)
iProbe3_Text                         244  0x000000f4 (const ??? 0)  (usage 3)
iprobe3F_text                        149  0x00000095 (const ??? 0)  (usage 9)
iprobe3Text_currentResults           119  0x00000077 (const ??? 0)  (usage 9)
iProbeError_text                     175  0x000000af (const ??? 0)  (usage 3)
iProbeErrorTitle                     239  0x000000ef (const ??? 0)  (usage 3)
iProbeIdentSuccessful_Text           246  0x000000f6 (const ??? 0)  (usage 3)
iProbeIdentUnsuccessful_Text         248  0x000000f8 (const ??? 0)  (usage 3)
iProbeIdentUnsuccessful_TitleText     247  0x000000f7 (const ??? 0)  (usage 3)
iProbeInitializationError_text       176  0x000000b0 (const ??? 0)  (usage 3)
iProbeInitiationComplete_text        250  0x000000fa (const ??? 0)  (usage 3)
iProceedWithoutcellText              231  0x000000e7 (const ??? 0)  (usage 3)
ireconnectText                       235  0x000000eb (const ??? 0)  (usage 3)
ireidentifying_text                  252  0x000000fc (const ??? 0)  (usage 3)
ireidentifyProbesNo_btn              254  0x000000fe (const ??? 0)  (usage 21)
ireidentifyProbesYes_btn             253  0x000000fd (const ??? 0)  (usage 21)
iretryConnectionBtn                  237  0x000000ed (const ??? 0)  (usage 21)
iretryProbeConnect_btn               249  0x000000f9 (const ??? 0)  (usage 21)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
iScreenMajorDecimalText              217  0x000000d9 (const ??? 0)  (usage 6)
iScreenMinorDecimalText              221  0x000000dd (const ??? 0)  (usage 6)
iScreenMinorlDigit                   219  0x000000db (const ??? 0)  (usage 12)
iScreenPatchDigit                    222  0x000000de (const ??? 0)  (usage 12)
iScreenVersionMajorDigit             215  0x000000d7 (const ??? 0)  (usage 12)
iScreenVersionText                   197  0x000000c5 (const ??? 0)  (usage 6)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
iSecsText                            189  0x000000bd (const ??? 0)  (usage 3)
isetPinDigits_00                      91  0x0000005b (const ??? 0)  (usage 18)
isetPinDigits_01                      93  0x0000005d (const ??? 0)  (usage 18)
isetPinDigits_02                      95  0x0000005f (const ??? 0)  (usage 18)
isetPinDigits_03                      97  0x00000061 (const ??? 0)  (usage 18)
isetPinDigits_04                      99  0x00000063 (const ??? 0)  (usage 18)
iShuttingDownText                    188  0x000000bc (const ??? 0)  (usage 3)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
istartBtn_startTreatment             108  0x0000006c (const ??? 0)  (usage 18)
iStartProbeIdent_btn                 241  0x000000f1 (const ??? 0)  (usage 21)
iStatictext1                         109  0x0000006d (const ??? 0)  (usage 3)
iStatusError_ComLoss_text            173  0x000000ad (const ??? 0)  (usage 3)
iStatusError_UnableToHeat_text       174  0x000000ae (const ??? 0)  (usage 3)
istopBtn_currentResults              131  0x00000083 (const ??? 0)  (usage 27)
istopTreatmentHeader                 165  0x000000a5 (const ??? 0)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
itargetTempDigits_tempSet             48  0x00000030 (const ??? 0)  (usage 18)
iTargetTempF_text_tempSet             55  0x00000037 (const ??? 0)  (usage 3)
itargetTempText_tempSet               41  0x00000029 (const ??? 0)  (usage 3)
itemperatureTitle                     54  0x00000036 (const ??? 0)  (usage 3)
itempMenuBtn                         153  0x00000099 (const ??? 0)  (usage 15)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
itimeAtTargerText_tempSet             57  0x00000039 (const ??? 0)  (usage 3)
itimeAtTargetDigits_tempSet           52  0x00000034 (const ??? 0)  (usage 12)
itimeAtTargetText_tempSet             43  0x0000002b (const ??? 0)  (usage 3)
ititleBreakers                        25  0x00000019 (const ??? 0)  (usage 3)
ititleCircuits                        16  0x00000010 (const ??? 0)  (usage 3)
itreamtmentResultsTitle              182  0x000000b6 (const ??? 0)  (usage 3)
itreatmentSuccessfulHeader           179  0x000000b3 (const ??? 0)  (usage 3)
iusePinBtn_currentPin                 60  0x0000003c (const ??? 0)  (usage 36)
iUserbutton5                         178  0x000000b2 (const ??? 0)  (usage 12)
iutilitiesMenuBtn                    152  0x00000098 (const ??? 0)  (usage 15)
ivalidatePinText                       2  0x00000002 (const ??? 0)  (usage 3)
iviewResultsBtn                      180  0x000000b4 (const ??? 0)  (usage 18)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iwelcome_header                        5  0x00000005 (const ??? 0)  (usage 3)
iwelcome_subHead                       6  0x00000006 (const ??? 0)  (usage 3)
iyesBtn_enableCell                    27  0x0000001b (const ??? 0)  (usage 30)
iyesBtn_InvalidPin                   162  0x000000a2 (const ??? 0)  (usage 27)
iyesBtn_stopTreatment                166  0x000000a6 (const ??? 0)  (usage 21)
iyesBtn_welcome                        7  0x00000007 (const ??? 0)  (usage 18)
j                                    208  0x000000d0 (mem) word (global)  (usage 1)
k                                    206  0x000000ce (mem) word (global)  (usage 13)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   17568  0x000044a0 (User func) args[7] r=0  (usage 225)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (usage 18)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (usage 18)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               17338  0x000043ba (User func) args[0] r=0  (not used)
mAirTemp                             228  0x000000e4 (mem) word (global)  (usage 57)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MAX_8BIT_VALUE                       255  0x000000ff (const dword)  (usage 3)
MAX_mAirTemp                         160  0x000000a0 (const dword)  (usage 3)
MAX_tAtTarget                        255  0x000000ff (const dword)  (usage 3)
MAX_tTemp                            140  0x0000008c (const dword)  (usage 9)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MIN_mAirTemp                         120  0x00000078 (const dword)  (usage 6)
MIN_tAtTarget                         10  0x0000000a (const dword)  (usage 3)
MIN_tTemp                            120  0x00000078 (const dword)  (usage 9)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
MSG_ACK                               33  0x00000021 (const dword)  (usage 15)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nCircuits                            222  0x000000de (mem) word (global)  (usage 19)
NORMAL_STOP_MESSAGE                   84  0x00000054 (const dword)  (usage 3)
normalStop                           774  0x00000306 (User func) args[0] r=0  (usage 3)
NOTOUCH                                0  0x00000000 (const dword)  (usage 3)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
OFF                                    0  0x00000000 (const dword)  (usage 16)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
ON                                     1  0x00000001 (const dword)  (usage 19)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (not used)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
PA0                                    1  0x00000001 (const dword)  (usage 3)
PA1                                    2  0x00000002 (const dword)  (usage 3)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 56)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
PIN_LENGTH                             6  0x00000006 (const dword)  (usage 18)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PIN_VALIDATION_ERROR                   4  0x00000004 (const dword)  (usage 6)
PINK                               65049  0x0000fe19 (const dword)  (not used)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrevFormErrorIdenification           286  0x0000011e (mem) word (global)  (usage 49)
previousLink                         284  0x0000011c (mem) word (global)  (usage 43)
print_Setup_Message               UNRESOLVED (User func) args[0] r=0  (not used)
PrintDisk                         UNRESOLVED (User func) args[5] r=0  (not used)
PrintDiskUnicode                  UNRESOLVED (User func) args[5] r=0  (not used)
PROBE_01                               1  0x00000001 (const dword)  (usage 6)
PROBE_02                               2  0x00000002 (const dword)  (usage 6)
PROBE_03                               3  0x00000003 (const dword)  (usage 6)
PROBE_AIR_TEMP                         0  0x00000000 (const dword)  (usage 6)
probe_idenification_number           298  0x0000012a (mem) word (global)  (usage 13)
PROBE_INITIATION_COMPLETE              6  0x00000006 (const dword)  (usage 6)
PROBE_SUCCESSFULLY_IDENTIFIED          4  0x00000004 (const dword)  (usage 6)
PROBE_UNSUCCESSFULLY_IDENTIFIED        5  0x00000005 (const dword)  (usage 6)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 4)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (not used)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
read_Arduino_Version              UNRESOLVED (User func) args[0] r=0  (not used)
read_Cell_Boot_Message              1555  0x00000613 (User func) args[0] r=0  (usage 3)
read_cell_establishment             1663  0x0000067f (User func) args[0] r=0  (usage 3)
read_Cell_Message_Strength          2056  0x00000808 (User func) args[0] r=0  (usage 6)
read_Cell_Strength_Message          1971  0x000007b3 (User func) args[0] r=0  (usage 6)
read_Cell_Version                 UNRESOLVED (User func) args[0] r=0  (not used)
read_Setup_Message                  2476  0x000009ac (User func) args[0] r=0  (usage 3)
read_Treatment_Update_Message        627  0x00000273 (User func) args[0] r=0  (usage 3)
recieve_Arduino_Version_Message     1129  0x00000469 (User func) args[0] r=0  (usage 5)
recieve_Cell_Version_Message        1265  0x000004f1 (User func) args[0] r=0  (usage 5)
RED                                63488  0x0000f800 (const dword)  (not used)
REINITATE_PROBE_IDENTIFICATION        87  0x00000057 (const dword)  (usage 3)
request_Cell_Strength               1525  0x000005f5 (User func) args[0] r=0  (usage 9)
request_Cell_Strength_Exist         1495  0x000005d7 (User func) args[0] r=0  (usage 6)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
runCurrentUpdate                     280  0x00000118 (mem) word (global)  (usage 55)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_COOLDOWN                       68  0x00000044 (const dword)  (usage 3)
SCREEN_COOLDOWN_MESSAGE_LENGTH         1  0x00000001 (const dword)  (usage 3)
SCREEN_MODE                           23  0x00000017 (const dword)  (usage 3)
SCREEN_STATUS_COMPLETE                75  0x0000004b (const dword)  (usage 3)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
selectBtn                           5515  0x0000158b (User func) args[2] r=0  (usage 12)
send_log_files                      2166  0x00000876 (User func) args[0] r=0  (usage 3)
SEND_LOG_FILES                        76  0x0000004c (const dword)  (usage 3)
send_msg_rsvd                       2824  0x00000b08 (User func) args[0] r=0  (usage 12)
serBuff                                2  0x00000002 (mem) word[32] (global)  (usage 6)
serBuffTx                             66  0x00000042 (mem) word[64] (global)  (usage 6)
SERIAL_TIMEOUT                     30000  0x00007530 (const dword)  (usage 6)
SERIAL_TIMEOUT_ITERATOR              100  0x00000064 (const dword)  (usage 12)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 117)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 85)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (usage 3)
setForm                              202  0x000000ca (mem) word (global)  (usage 30)
SETUP_MESSAGE                         83  0x00000053 (const dword)  (usage 3)
SETUP_MESSAGE_LENGTH                   9  0x00000009 (const dword)  (usage 3)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (not used)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
start_Probe_Intiation               2238  0x000008be (User func) args[0] r=0  (usage 6)
start_Probe_Reintiation             2209  0x000008a1 (User func) args[0] r=0  (usage 3)
state                                196  0x000000c4 (mem) word (global)  (usage 258)
state1                               194  0x000000c2 (mem) word (global)  (usage 10)
STATUS_COMM_LOSS                       4  0x00000004 (const dword)  (usage 9)
STATUS_COMPLETE_OK                     2  0x00000002 (const dword)  (not used)
STATUS_NOMINAL                         1  0x00000001 (const dword)  (usage 3)
STATUS_POWER_LOSS                      3  0x00000003 (const dword)  (not used)
STATUS_POWER_LOSS_2                    8  0x00000008 (const dword)  (usage 9)
STATUS_POWER_LOSS_3                    9  0x00000009 (const dword)  (usage 9)
STATUS_POWER_LOSS_4                   10  0x0000000a (const dword)  (usage 9)
STATUS_PROBE_COMM_LOSS                12  0x0000000c (const dword)  (not used)
STATUS_PROBE_ERROR                    11  0x0000000b (const dword)  (usage 9)
STATUS_PROBE_INITIATION               13  0x0000000d (const dword)  (usage 9)
STATUS_STOPPED_EMERGENCY               7  0x00000007 (const dword)  (not used)
STATUS_STOPPED_USER                    5  0x00000005 (const dword)  (not used)
STATUS_UNABLE_TO_HEAT                  6  0x00000006 (const dword)  (usage 9)
statusErrorDisplay                  3227  0x00000c9b (User func) args[1] r=0  (usage 21)
statusErrors                         300  0x0000012c (mem) word (global)  (usage 7)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
switchBtnPress                      5651  0x00001613 (User func) args[2] r=0  (usage 30)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (not used)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAtTarget                            230  0x000000e6 (mem) word (global)  (usage 30)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEMP_ARRAY                           258  0x00000102 (mem) word[4] (global)  (usage 48)
tempBtnHighlight                    5579  0x000015cb (User func) args[1] r=0  (usage 24)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
thisSignalStrength                   288  0x00000120 (mem) word (global)Notice: global var 'thisSignalStrength' is never used
  (not used)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
time_iterator_for_serin             2577  0x00000a11 (User func) args[1] r=0  (usage 42)
TimeElapsedHrs                       250  0x000000fa (mem) word (global)  (usage 10)
TimeElapsedMin                       252  0x000000fc (mem) word (global)  (usage 10)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 3)
TOUCH_GETX                             1  0x00000001 (const dword)  (not used)
TOUCH_GETY                             2  0x00000002 (const dword)  (not used)
TOUCH_MOVING                           3  0x00000003 (const dword)  (not used)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (not used)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 3)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
touchEventHandler                  13684  0x00003574 (User func) args[0] r=0  (usage 3)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (not used)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
TREATMENT_CLEAR                        0  0x00000000 (const dword)  (usage 3)
treatment_Stopped_Arduino           5484  0x0000156c (User func) args[0] r=0  (usage 3)
TREATMENT_UPDATE_MESSAGE              85  0x00000055 (const dword)  (usage 6)
TREATMENT_UPDATE_MESSAGE_LENGTH        9  0x00000009 (const dword)  (usage 6)
treatmentErrors                     2854  0x00000b26 (User func) args[1] r=0  (usage 3)
treatmentStatus                      278  0x00000116 (mem) word (global)  (usage 9)
TRUE                                   1  0x00000001 (const dword)  (usage 105)
tTemp                                226  0x000000e2 (mem) word (global)  (usage 63)
tTempAddBuffer                      3387  0x00000d3b (User func) args[0] r=0  (usage 3)
tTempMinusBuffer                    3657  0x00000e49 (User func) args[0] r=0  (usage 3)
tTempMinusBuffer_02                 3603  0x00000e13 (User func) args[0] r=0  (usage 3)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (not used)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (not used)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (not used)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (not used)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 4)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 4)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UPDATE_CELL_STRENGTH                  77  0x0000004d (const dword)  (usage 12)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
utilitiesFormReset                  3924  0x00000f54 (User func) args[0] r=0  (usage 18)
VERSION_ARDUINO_MAJOR                216  0x000000d8 (mem) word (global)  (usage 19)
VERSION_ARDUINO_MINOR                218  0x000000da (mem) word (global)  (usage 19)
VERSION_ARDUINO_PATCH                220  0x000000dc (mem) word (global)  (usage 19)
VERSION_CELL_MAJOR                   210  0x000000d2 (mem) word (global)  (usage 16)
VERSION_CELL_MINOR                   212  0x000000d4 (mem) word (global)  (usage 10)
VERSION_CELL_PATCH                   214  0x000000d6 (mem) word (global)  (usage 10)
VERSION_SCREEN_MAJOR                   1  0x00000001 (const dword)  (usage 6)
VERSION_SCREEN_MINOR                   0  0x00000000 (const dword)  (usage 6)
VERSION_SCREEN_PATCH                   2  0x00000002 (const dword)  (usage 6)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WAITING_TO_BEGIN                       0  0x00000000 (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 18)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
